{
  "data": [
    {
      "data": [
        "L 13: Shortest Paths 2",
        "Reference and some figure credit:",
        "Chapter 8, Algorithms by Erickson"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=0&isPrimary=false&absoluteTime=13353099901.025",
      "start_time": 1,
      "end_time": 6
    },
    {
      "data": [
        "Yeah. I feel like I should be pushing, because, you know, you're right.",
        "It's kind of like.",
        "Yeah. Yeah, I was just. Yeah, that's right.",
        "I mean, I know I.",
        "All right. Hello and welcome, everyone. Welcome to your favorite out of these class and mine.",
        "I'm sorry. 334 today, our 13th class.",
        "Continue our conversation about shortest paths. First up, some announcements.",
        "(2.'20,'2024)",
        "L 12 In-Class Exercise (2/20/2024)",
        "CS 330 *wing 202'",
        "Consider running a bre&dth.hrst search on this example graph starting",
        "A is the first from the queue. Which Of the nodes could",
        "third \u2022",
        "c",
        "D"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=15&isPrimary=true&absoluteTime=13353099915.525",
      "start_time": 15,
      "end_time": 93
    },
    {
      "data": [
        "The exam will be next Tuesday, 75 minutes in class.",
        "Please arrive a few minutes early if you are able to.",
        "That will expedite the distribution of exams. However, we will begin no earlier than 125 hour start time.",
        "But please do try to be back next week if you are able to do so.",
        "As I mentioned before, the emphasis of problems will be on algorithm design of the proofs.",
        "You will not be asked to throw all of the problems because you don't necessarily have time to do",
        "that and you not need to bring and may not bring any notes or calculator or other things like that.",
        "Okay. Any questions about course announcements?",
        "Logistics, matters of that sort. Then here's what's up on the agenda for today.",
        "1.",
        "2.",
        "3.",
        "Announcements",
        "HW 5 (DFS) due today, Thursday 2/22",
        "\u2022 Last homework covered on midterm exam",
        "Review recitation next Monday",
        "Midterm exam next Tuesday 2/27",
        "\u2022 75 minutes, 4 problems, up to and including DFS",
        "\u2022 Emphasis on algorithm design over proofs",
        "\u2022 Problems related to / variants on things you have seen in",
        "lecture, homework, and recitation",
        "\u2022 No notes, calculators, etc."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=1&isPrimary=false&absoluteTime=13353100080.525",
      "start_time": 180,
      "end_time": 234
    },
    {
      "data": [
        "If A is the first node explored, I'll think of removing from the queue as meaning when you're going to explore from that node.",
        "If it is the first node explored in a brand first search.",
        "Then we're going from A to discover both the B and the C, the two neighbors name.",
        "So we'll add both B and C into our queue.",
        "LIZ tn.aass (2/20/2024)",
        "Questions Responses",
        "Consider running a breadth-first search on this example graph starting",
        "If A is the first node removed from the queue, Which Of the nodes could",
        "be the third node removed from the queue? \u2022"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=330&isPrimary=true&absoluteTime=13353100230.525",
      "start_time": 330,
      "end_time": 360
    },
    {
      "data": [
        "Most of you correctly set false in a directed graph.",
        "This is no longer necessarily true. To see this in an extreme example,",
        "note that it is possible that there exists a path from S2 to but there may not even exist a pattern from T back to S.",
        "So there is not this simple relationship between shortest paths from S2, TNT to S in a directed graph.",
        "But there is a slightly more complex relationship related to the final question you were asking.",
        "Let's see who who observed this in a directed graph with n nodes and m edges?",
        "How efficiently can you solve the shortest path distance to a target?",
        "No T from all possible source vertices.",
        "So this is the flip of normally we think about the single source shortest path problem from the source vertex.",
        "Calculate the shortest path distance to all other target nodes masking kind of the flip of that from a given target node.",
        "Can you calculate the shortest path distance from any possible source node?",
        "How efficiently can you do that, do you think?",
        "The most popular answer was oh of endless M linear time, the same as the single source shortest problem.",
        "The second most popular was O and Times and plus M.",
        "The correct answer is with the orange o of endless. In the linear time solution is the most efficient that you could do this.",
        "Where do these runtimes likely come from? So o of end times end plus m You could solve the problem for example,",
        "by for every source vertex running a single source shortest path from that source vertex to the target t that would be in veces,",
        "Forms",
        "L12 (2/20/2024) \u2022 saved",
        "Responses",
        "Sync resuRs to Excel for the web automabcaUy md analyze with",
        "more and nexiblity.",
        "True or false: In a directed graph, the shortest path distance from s to t equals the shortest path",
        "distance from t to s?",
        "4. In a directed graph with n nodes and m edges how efficiently can you solve the shortest path distance"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=438&isPrimary=true&absoluteTime=13353100338.525",
      "start_time": 438,
      "end_time": 540
    },
    {
      "data": [
        "Well, let's go on to talk about a more general form of the short term health problem.",
        "Let's think about the problem with weighted graphs, and we will start by considering non-negative or.",
        "To be more precise, I'll usually just assume positive edge weights.",
        "Nonnegative Weights:",
        "Dijkstra's Algorithm"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=672&isPrimary=true&absoluteTime=13353100572.525",
      "start_time": 672,
      "end_time": 687
    },
    {
      "data": [
        "So for a weighted graph, we imagine that there is a weight associated, a number associated with every edge of the graph.",
        "And to begin, I will assume that these weights are all positive integers for simplicity.",
        "Okay. So, for example, previously our notion of a shortest path from A to C would have been to take the single edge from A to C,",
        "But now we've introduced weights along all of those edges and we want to know the path that has the smallest total weight.",
        "Summing the weights of all of the edges along the path,",
        "which in this example that I've drawn would actually be a somewhat circuitous looking A to B to DE to C,",
        "which has a total weight of two plus four plus three is nine as opposed to the single edge from A to C with weight ten.",
        "So there are a variety of circumstances under which you might want to parameterized weights on the edges of your given network.",
        "For example, if you are representing a real world road network, all of your road segments may not necessarily have the same length.",
        "And so you might want a way to represent that with weights on those edges.",
        "Our problem now is to compute the shortest path of this more general form.",
        "It's more general because you can imagine the unweighted version was like this one where all of the edge weights were one.",
        "It would have been equivalent or any particular unit you prefer. But we like to think about solving problems via reduction.",
        "Defining Weighted Shortest Paths",
        "A path PSA, t from s to t is a shortest",
        "path if",
        "Ips%tl",
        "For all other paths PstA*t from s to t,",
        "where",
        ". = w(u, v) for a",
        "weighted graph.",
        "2",
        "5",
        "10",
        "4",
        "4",
        "3"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=4&isPrimary=false&absoluteTime=13353100620.525",
      "start_time": 720,
      "end_time": 807
    },
    {
      "data": [
        "two with two edges and one dummy vertex in the middle, a vertex that didn't appear in the original graph.",
        "And we don't actually care about other than the fact it is a means to an end of calculating distances of the real vertices from the original graph.",
        "Similarly, if we had a higher weight, a greater weight along one of the edges,",
        "like the the edge from BD had way for when we create a path of length for with",
        "four edges and three dummy vertices from B to D in our reduced unweighted graph,",
        "I claim that a weighted shortest path in G corresponds to an unweighted shortest path in G prime.",
        "It's not too hard to see the way along An unweighted path in G prime is by construction equal to the weight of a particular weighted path in G.",
        "And in addition, anywhere that we've introduced these new dummy vertices,",
        "they can actually lead to new kinds of paths they lead only along these paths that previously were.",
        "The single edge of the original graphs. We've not really changed the structure of connectivity in the graph at all.",
        "Okay, so given this, we can define the following algorithm by reduction for solving this problem.",
        "Create this reduced graph g prime and then run your breakfast search on it to calculate",
        "the shortest distances of interest to you and return those for the runtime of this",
        "algorithm is going to be dominated by first constructing and then running breakfast search",
        "on this transform graph g prime and what is probably going to dominate the runtime is,",
        "if you notice read first searches is linear, has linear runtime in the size of the graph you're running it on.",
        "Well, what is the size of the graph we're creating? Okay.",
        "Probably the dominating term is going to be that for each edge in the original graph,",
        "we're now constructing a number of edges equal to the weight of that edge in G prime.",
        "So the number of edges in G prime, which is probably going to be the dominating term for this algorithm,",
        "is like the sum of the weights from the original graph correspond to the number of edges in this new graph.",
        "If all of the weights in your original input graph were, say, small like small constants.",
        "One, two, three, four, five, something like this, then we would recover linear time complexity with respect to the parameters of the original graph.",
        "And indeed, we could solve this efficiently using breadth first search.",
        "If we happen to know that all of our edge weights are, let's say, small constants or something like this, of course, what if the weights are large?",
        "Reducing Weighted to",
        "Unweighted Problem",
        "Given a graph G = (V, E) with",
        "Define G' = (V, E) where each edge",
        "positive integer weights w(u, v) (u, v) is replaced with an unweighted",
        "for all (u, v) E",
        "path of size Ipuvvl = w(u, v).",
        "4",
        "4",
        "c",
        "c"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=5&isPrimary=false&absoluteTime=13353100800.525",
      "start_time": 900,
      "end_time": 1080
    },
    {
      "data": [
        "Okay, let me imagine running a breakfast search on this is constructed graph g prime and ask the following",
        "question What will be the order in which it will explore the nodes of the original graph?",
        "The nodes we actually care about ABC and in this case, in what order will they be explored?",
        "If I was to attempt to simulate, I was to ask. Okay.",
        "Rather than actually worrying about traversing along these potentially long paths of dummy vertices I don't care about.",
        "Could I instead just ask myself how long do I need to wait until I would arrive at B?",
        "For example,",
        "the order in which these nodes would be explored by breath research starting from the starting node would be observe first the closest node.",
        "Okay, because it would explore everything. One hop away and then reverse from a would explore everything.",
        "One hop away and two hops away and end up with it.",
        "Be okay in the next node it would explore from is the second closest node in this case is C a distance far away,",
        "finally the third closest node D and so on and so forth.",
        "So we have this intuition that if we again had for breakfast search that we're",
        "going to explore nodes in order of sort of how far away they are from the start.",
        "Vertex We're going to explore nearer nodes first or better nodes first in some sense better, meaning shorter distance.",
        "In other words, we still have, even in this sort of constructed G prime,",
        "the idea of this wavefront exploration of the closer things before we explore, the less close thing, before we explore the yet less close things.",
        "And rather than trying to do this explicitly in this constructed graph,",
        "let me instead just try to maintain a data structure to track estimates of distance to nodes and explore those nodes from closer to farther away.",
        "According to my estimate of distance, this will be our idea.",
        "Nearer Nodes First",
        "We could simulate this reduced",
        "BFS (without constructing G') if"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=1119&isPrimary=true&absoluteTime=13353101019.525",
      "start_time": 1119,
      "end_time": 1248
    },
    {
      "data": [
        "Weight is the right word and use the term Dijkstra's algorithm that you will offer to to other people as well.",
        "To describe the idea of this algorithm.",
        "It is greedy in the following sense that at the next step it always chooses to explore from the",
        "nearest node that it has not yet explored from okay according to its current estimates of distance.",
        "So it maintains this Wavefront pattern of exploration searching from closer to farther away nodes.",
        "The only difference from Bradford search being that now we're accounting for weights along the edges and we'll",
        "need a more complex data structure for storing nearer versus farther away nodes than simply a first in,",
        "first out. Q Like a breadth first search and a very high level, while there are unexplored nodes remaining,",
        "will choose the next closest unexplored node to the start.",
        "Vertex will look at all of its neighbors, meaning we will examine all of the edges outgoing from that node.",
        "If we find a neighbor that is that we haven't discovered yet, we haven't found any path to that node,",
        "then we will know that that path, meaning both a distance as well as a previous node along the path.",
        "Alternatively, and this is new compared to both for search,",
        "it may be the case that we find a shorter path to that node than we had previously discovered,",
        "in which case we need to update our estimate of distance to that node.",
        "This is the sketch of the algorithm, the way that we'll keep track of that issue of the next nearest node,",
        "Dijkstra's Algorithm in Abstract",
        "While unexplored nodes remain",
        "\u2022 Explore the next nearest",
        "unexplored node",
        "For each neighbor:",
        "\u2022 If undiscovered, note path",
        "\u2022 Update shortest path if",
        "shorter to go to neighbor",
        "from current",
        "Just like BFS (explore closer nodes first) except...now",
        "we need to account for weights.",
        "2023."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=7&isPrimary=false&absoluteTime=13353101160.525",
      "start_time": 1260,
      "end_time": 1356
    },
    {
      "data": [
        "Now, I am assuming that you have seen a priority queue before in a data structures class.",
        "Tracking the Nearest Node in a",
        "Weighted Graph",
        "Unweighted Graph",
        "Track next nearest",
        "unexplored node with a",
        "first-in first-out (FIFO)",
        "Weighted Graph",
        "Track next nearest",
        "unexplored node with a",
        "priority queue.",
        "Value Key",
        "queue.",
        "Front: remove",
        "from here",
        "D",
        "Back: Add here",
        "x",
        "Minimum:",
        "remove this next",
        "z",
        "R",
        "5",
        "9",
        "6",
        "7"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=8&isPrimary=false&absoluteTime=13353101340.525",
      "start_time": 1440,
      "end_time": 1449
    },
    {
      "data": [
        "Let's jump into the details then about Dijkstra's algorithm.",
        "First up, we're going to do the same kind of standard initialization that we did with Red for search,",
        "and we're going to have a couple of lookup tables.",
        "I'll call D and red D corresponding to our distances that we're calculating shortest path distances that we're calculating from the start,",
        "Vertex S to all of the nodes and for previous corresponding to lookup table saying for a given node,",
        "2",
        "3:",
        "Dijkstra's Algorithm Details",
        "procedure DUKSTRA(S)",
        "Let d, prev be new length n lookup tables",
        "Let PQ bea new priority queue",
        "PQ.add(s, dbl)"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=1593&isPrimary=true&absoluteTime=13353101493.525",
      "start_time": 1593,
      "end_time": 1620
    },
    {
      "data": [
        "distance to be because we want to explore nearer routes first for breakfast search.",
        "This was sufficient for Dijkstra's algorithm.",
        "It is not for Dijkstra's algorithm due to the weights.",
        "It is possible that we may discover a shorter path to a node that we had already previously discovered.",
        "So that's what this second case corresponds to.",
        "If the distance to the vertex be that we our current estimate of the distance to V is greater than the distance going through,",
        "you should think of on the right hand side. Right. The right hand side is the distance from s to you, plus the way of the edge from you to V.",
        "So that corresponds to the weight of the path to V going through you.",
        "If that is less than our current estimate of the distance to be,",
        "we found a new shorter path than we were previously aware of to V and we will record the same information,",
        "will update the distance to the we'll update the parent or the previous node to be.",
        "And finally, rather than adding into the priority queue, we will in general simply update the priority of the to say,",
        "Oh, we now think that V is closer to the source vertex update its priority.",
        "We might want to explore that a little bit sooner in the future. So this is the general idea in terms of what you return at the end.",
        "You could return the distances, you could return the search tree itself. You could return home if you wished in general.",
        "I do want a comment and then I'll take a couple of questions doing this. You will commonly see written,",
        "and I believe Erickson follows this kind of structure to writing pseudocode for Dijkstra's algorithm doesn't show the two cases.",
        "That's because a common thing you will see people write in textbooks for Dijkstra's algorithm is",
        "at the very beginning during the initialization to initialize every node in the entire graph,",
        "all vertices, regardless of whether there is a path to them or not,",
        "into the distance table and the priority queue setting all of their initial distances to infinity.",
        "That's a common trend that you will see.",
        "If you do that, then there is never a line nine case because you've already initialize everything to infinity and it's already in there.",
        "I prefer not to write that the way that I write the pseudocode.",
        "If the graph is disconnected.",
        "It's possible you don't actually need to look at all the vertices in the graph to find a particular path or section of paths of interest.",
        "And it is possible, as I've written here, to simply add nodes as you discover them.",
        "It's not strictly necessary to pre initialize every node into the graph, into the distance in the priority queue,",
        "but you can do that as also correct and you'll see that written in many places, including in Ericsson's texts equivalent to this.",
        "Hey, questions about this writing. Yes.",
        "Dijkstra's Algorithm Details",
        "1: procedure DIJKSTRA(s)",
        "2:",
        "4:",
        "6:",
        "Let d, prev be new length n lookup tables",
        "Let PQ be a new priority queue",
        "PQ.add(s, d[s])",
        "while PQ not empty do",
        "u = PQ.remove()",
        "for (u,v) in E do",
        "if v not in d then",
        "d[v] = d[u] + w(u, v)",
        "prev[v] = u",
        "PQ.add(v, d [v]",
        "initialize",
        "Explore from the next",
        "nearest node: consider all",
        "of its neighbors",
        "If v is newly discovered",
        "aplore v rater"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=10&isPrimary=false&absoluteTime=13353101700.525",
      "start_time": 1800,
      "end_time": 1980
    },
    {
      "data": [
        "All right. Let's try to do this really fast. See if this still makes sense as we look at it in action.",
        "Here's an example graph.",
        "Let's do a single source shortest path search using Dijkstra's algorithm, starting at the Node A and explore these cases to initialize.",
        "We'll set the distance to a at zero is the start vertex.",
        "If you were to do this the way that Erickson's text and many other textbooks write it,",
        "I would put all of the nodes into the D table and the probe table with their distances set to infinity.",
        "Dijkstra's Algorithm from A",
        "2",
        "c",
        "4",
        "prev",
        "1; procedure DIJKsrM(s)",
        "2: 14.\u2022t d, p rev be new le ngth n lookup tables",
        "3k Let PO be a n ew prior@y q geue",
        "5: PQ.add(s.",
        "1",
        "2",
        "Value",
        "Kev"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=2130&isPrimary=true&absoluteTime=13353102030.525",
      "start_time": 2130,
      "end_time": 2160
    },
    {
      "data": [
        "total distance along the path from a to F that goes through E would only be five.",
        "And that's less than the shortest path distance I knew previously going through B of six.",
        "So let me update my information that the distance to F is actually only five, not six,",
        "that the previous node along a shortest path two is actually not B and that the I want to update the key F in particular,",
        "I want to update the priority of its exploration. Thank.",
        "After this. Not a whole lot interesting will happen. We're going to explore from next.",
        "That's much shorter than what we already knew about. We'll explore from F next.",
        "We'll discover a new node C we hadn't discovered before and we'll denote the appropriate information.",
        "And that's kind of the end of this graph. We end up with a shortest path tree that looks like this.",
        "Dijkstra's Algorithm from A",
        "2",
        "o",
        "2",
        "4",
        "3",
        "65",
        "6:",
        "13:",
        "A",
        "B",
        "D",
        "F",
        "prev",
        "B",
        "D",
        "E",
        "A",
        "B",
        "while PQ not empty do",
        "u = PQ.remove()",
        "for (u,v) in E do",
        "if v not in d then",
        "d[v] = d[uJ + w(u, v)",
        "prev[vl = u",
        "PQ.add(v, d[vD",
        "if d[vl > d[u) + w(u, v) then",
        "d[v] = d[ul + w(u, v)",
        "prev[vl u",
        "pQ.decreaseKey(v, d[v])",
        "Value Key",
        "4"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=13&isPrimary=false&absoluteTime=13353102240.525",
      "start_time": 2340,
      "end_time": 2397
    },
    {
      "data": [
        "First of all, is this fast or is it slow?",
        "Or is it something in between? That first century is really fast.",
        "But for research was just look at the graph once.",
        "Look at everything the graph wants. That's it's just like a scan over the graph.",
        "What's Dijkstra's algorithm going to be like? Let's reason about this.",
        "The reasoning is similar to the first search, I'll note here on line nine and the way that I've written this,",
        "I've written this explicitly, right, that we're only going to add each node to the priority queue at most once.",
        "Similarly, if you do it like Ericsson's way, you add all the notes,",
        "the priority queue at the beginning, and then you remove them, but you never add this.",
        "So either way, we're going to examine each node at most once.",
        "Okay. And by examine, I mean removing from the priority queue as you online seven.",
        "Okay. What do we when we remove a particular node, what do we do with it?",
        "We consider all of its neighbors, all of the outgoing edges from that node.",
        "We don't look at all of the edges in the entire graph.",
        "When we're exploring from a node, you, we just look at the outer edges from that particular node.",
        "It's just a local thing that's happening there. Okay.",
        "That means that in total, across the execution of the whole algorithm, just like with breakfast search,",
        "8-.",
        "_11;",
        "13:",
        "15:",
        "162",
        "Dijkstra's Algorithm Runtime",
        "Complexity",
        "while PQ not empty do",
        "u PQ.remove()",
        "for (u.v) in E do",
        "ifv not in d then",
        "d[v] d[u] + w(u, v)",
        "prev[v] u",
        "PQ.add(v, d[v])",
        "if d[v] > d[ul + w(u, v) then",
        "d[vJ = w(u, v)",
        "prev[V] u",
        "PQ.decreaseKey(v, d [v] )"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=2445&isPrimary=true&absoluteTime=13353102345.525",
      "start_time": 2445,
      "end_time": 2520
    },
    {
      "data": [
        "Is it? There's nowhere in the algorithm. This is not a brute force algorithm where we explicitly check after we constructed a path,",
        "all possible other paths to see if there was anything else shorter.",
        "Why are we convinced that this is the shortest path? We're exploring nodes in a nearer nodes first fashion.",
        "Is that necessarily the way to find shortest as I claim that it is, but it's not trivial to see that it is.",
        "This isn't something that you should have thought was just obviously correct.",
        "If you did think this was obviously correct, then either you trust me too much or you don't have enough healthy suspicion in general about the world.",
        "Now, I'm not lying to you. This is a path to correctly computing where the shortest paths and grasp.",
        "But let's talk for a few minutes about why how you try to convince someone else that it was correct.",
        "And the most important to someone else is yourself. What do we want to argue?",
        "If de view is the algorithms distance, the distance the algorithm calculates.",
        "Dijkstra's Algorithm Correctness"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=2625&isPrimary=true&absoluteTime=13353102525.525",
      "start_time": 2625,
      "end_time": 2700
    },
    {
      "data": [
        "We explicitly maintain real paths and the distances indeed are exactly the distances along those paths that we maintain.",
        "So I'm also not going to worry about the case where, for example, we've way underestimated the true shortest path distance.",
        "That doesn't happen. We never make errors of the form like our estimated distance is way less than any actual path in the graph.",
        "Okay. And indeed that would be easy to check and verify in code or experimentally.",
        "Right? You could actually like run your algorithm.",
        "You get back some past, you get back some distances, check if the distance along your path is what it said.",
        "It was good to go right.",
        "A much more interesting kind of error is, is it possible that we come up with a path with a distance that's not as good as the optimal one?",
        "In other words, the interesting kind of error is when. Each of you is possibly greater than the star of you.",
        "I want to argue to you that that doesn't happen. For this case.",
        "Note in the induction. Why not?",
        "Let me split up the graph a little bit into some segments, part of which we've got a handle on.",
        "Let me define as the block or before.",
        "Okay. If you prefer to be the first K minus one nodes that were removed, V sub K to be the eighth node removed from the very queue.",
        "And then we have the remaining ones. So we have a picture that looks something like this.",
        "So our start vertex of course, is one of those first K minus one nodes that was Explorer.",
        "So we know that it's in the lesson yet we don't know what's going on with the greater than K.",
        "We haven't explored any of those yet, but we kind of got a handle on the less than K from the inductive hypothesis.",
        "We know that we've got the shortest path distance to all of those notes and now we've got this v tang and we're wondering what's going on there.",
        "The algorithm, we just remove the K from the priority queue.",
        "We're wondering about its distance and said the inductive hypothesis implies that",
        "we've got the real shortest path distances for everything in the less than K.",
        "We want to argue that we've got the correct distance at this point.",
        "When we remove the sub K that we've got the correct short distance to it.",
        "And I'm going to focus on the possibility of an error where we we have a distance, but it's greater than the real shortest path.",
        "Distance. We found some path, but not the shortest path, Right.",
        "At this stage we know we found some path to VK because VK just got removed off the priority queue.",
        "Right. And in my implementation, that only happens when we've discovered a path to disappear.",
        "Let's think about a path of the following For even the shortest path in the graph.",
        "The shortest path in the graph that happens to have the structure that it goes from SW to VK and everything",
        "up to VK lies in this left set of explored nodes out of all of the paths with that kind of structure.",
        "Dijkstra's Algorithm Correctness",
        "Let d[u] be the algorithm's distance and let d* [u] be the true",
        "shortest path distance.",
        "Claim. d[u] = d* [u] for all nodes u that have been removed",
        "from the priority queue.",
        "Proof. By induction on the order in which nodes are removed",
        "from the priority queue.",
        "\u2022 Base Case. d[s] = [s] = 0 by the initialization.",
        "\u2022 Inductive Hypothesis. Suppose the claim is true for the first",
        "k \u2014 I nodes removed from the priority queue.",
        "\u2022 Inductive Step. Want to show true for the k'th node",
        "removed."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=16&isPrimary=false&absoluteTime=13353102780.525",
      "start_time": 2880,
      "end_time": 3060
    },
    {
      "data": [
        "Mystery world. No idea what's going on there. Suppose that's true.",
        "Let me denote this by. It's a path that starts at s.",
        "At some point it crosses from the left, set into the right set.",
        "Whatever edge that is, that crosses from the left side into the right said.",
        "Let me call that A to B, where A is the last node in the first set and B is that first node in the second set.",
        "Oh, no. There's a visual, but the visual isn't showing up. Do the animation.",
        "I'm going to show all the things I want you to see the visual. I'm sorry. There's got to be extra text.",
        "We'll talk. So suppose right at the perfect something like this.",
        "If it's a path that lies partially in the right set, then it has to enter the right set at some point.",
        "Whenever it enters the right set, at some point, I'll be the first node that it enters in that set called a the last node before exiting the left set.",
        "And look at this edge from A to B. Got to have that structure.",
        "Who knows how it gets to A, who knows how it gets to VCC after B, but there's got to be some edge like that.",
        "Okay. Now, if that's true, I don't necessarily know things about the shortest path.",
        "Distance is on the right. What I do know, I do know that the algorithm's distance estimate to be must be at most the true shortest path.",
        "Distance to a plus. The way to the edge for me to be for the exact same reason as before the algorithm has explored f okay.",
        "And it does. The thing where it checks right is the distance from s to a plus the way to the",
        "edge from A to B less than or than our current estimate of distance to be.",
        "If so, we update it. So we know at this point that our distance estimate to be is at most also by the index of",
        "hypothesis that the shortest path distance to a plus the way to the edge for me to be.",
        "And here's where we need a crucial property. The algorithm I described to you is not correct.",
        "Not in general, not if there are negative weights in the graph and if some of the weights in the graph can be like minus ten.",
        "It turns out the way that I wrote Dijkstra's algorithm is not necessarily correct.",
        "But if all of the edge rates are positive, it is, or more generally not negative.",
        "Those zero edge weights are kind of uninteresting. Why does that show up here?",
        "Because it suggests, right, that, well, the actual the distance along this path and we're supposing for a contradiction",
        "to this red hat is like strictly shorter than anything we considered before.",
        "Well, the distance along that whole path, right, has to be more than the distance to be, because there's more have to be at least one more edge.",
        "And the edge weights aren't negative. So I get this inequality that the distance to be.",
        "Dijkstra's Algorithm Correctness",
        "\u2022 Suppose for a contradiction there is a strictly shorter path",
        "from sto Vk < IP",
        "l) that lies",
        "partially in where a b is the first edge that passes from",
        "to Lk."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=18&isPrimary=false&absoluteTime=13353103140.525",
      "start_time": 3240,
      "end_time": 3420
    },
    {
      "data": [
        "She was about to rise to the occasion and this will be a relatively short one.",
        "There are just a couple of questions on here. At least three of those.",
        "That's what he must have said.",
        "Yeah, I understand that.",
        "As much progress as it.",
        "Small issues like this one.",
        "Is these an end to the chapter?",
        "I usually choose to do it.",
        "Have a chance. You just need to keep it secret.",
        "It's almost like you're not ready for it.",
        "I feel like my wife, you know, many times, you know, I feel like it's just like I think to myself, what does this mean for to be?",
        "I want to be perfect, perfect balance.",
        "Now, this is a way for some property owners to want to go back to Africa.",
        "In-Class Exercise",
        "duke.is/m/7c2z@",
        "Talk with your neighbors,",
        "Submit on your own.",
        "Graded for completion,",
        "not correctness."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=20&isPrimary=false&absoluteTime=13353103500.525",
      "start_time": 3600,
      "end_time": 3780
    },
    {
      "data": [
        "Most of you believe when t is removed from the priority queue.",
        "That is correct. And this is actually something that comes out if you understand, like the argument in the analysis.",
        "Right. It's not obvious just from writing the algorithm that you can do this, but if you only want to know the shortest path from s t,",
        "once you remove t from the priority queue, you can actually go ahead and terminate there and return.",
        "You've already got the shortest path to T. You don't need to keep searching in that case.",
        "Now that doesn't change the worst case asymptotic runtime complexity because it's possible",
        "that the target no t you were looking for happened to be one of the last nodes you explore.",
        "But in practice, if you're searching for a path between two nos that are really geographically close to each other, it could make a big difference.",
        "Like I would highly recommend if you're searching on the road network for the shortest path from Manhattan to the Bronx",
        "that you go ahead and stop after you've finished exploring New York City and don't continue all the way in Los Angeles.",
        "You do you. But that would be my recommendation. Or a directly directed, positively weighted graph with net inverse season images.",
        "Suppose you want to calculate up all pairs.",
        "Shortest path distance is the flip. So you want many paths, the shortest path from every vertex to every other vertex, all pairs shortest path.",
        "And you will do that using Dijkstra's algorithm, potentially calling it multiple times.",
        "How efficiently can you do that? What will the runtime ultimately end up being like?",
        "Most of you believe it'll look like end times end plus log in.",
        "And that is correct. That would be the best that you could do. That's what you would get if you for every node in the graph,",
        "the factor in run a single source Dijkstra's algorithm from that start vertex to get the shortest path to everything else from there.",
        "If you do that you need only and where number of vertices and runs of Dijkstra's algorithm in order to get the all pairs the shortest paths like this,",
        "Qu t ions Responses",
        "LB In-class Exercise (2/20/2024)",
        "2:",
        "Suppose you only want to know the shortest path",
        "from a given source node S to a given target node T",
        "(as opposed to shortest paths from S to all other",
        "nodes).",
        "What is the earliest point at Which you can safely",
        "return the correct shortest path from S to T?",
        "Collect responses",
        "procedure DIJKSTRA (s)",
        "tet d, prev be new length n lookup tables",
        "be a priority queue",
        "PQ.add(s, d[s])",
        "while PQ not empty do",
        "u PQ.remove()",
        "for (u,v) in E do",
        "if v not in d then",
        "d[v] d[ul + w(u, v)",
        "prev[v] u",
        "PQ.add(v, d[v])",
        "if d(vl > dtul + w(u, v) then",
        "dtvJ d[ul + w(u, v)",
        "prev[vl u",
        "PQ. decreaseKey(v, d"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=22&isPrimary=false&absoluteTime=13353103860.525",
      "start_time": 3960,
      "end_time": 4089
    },
    {
      "data": [
        "Let me say something about negative weights. No.",
        "They're a thorn in the side of algorithms like Dijkstra's algorithm for the following reason.",
        "Negative Weights: The",
        "Bellman-Ford Algorithm"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=77b633bc-5895-4574-9de2-b11e0146d706&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=4101&isPrimary=true&absoluteTime=13353104001.525",
      "start_time": 4101,
      "end_time": 4107
    },
    {
      "data": [
        "So we would explore from B next.",
        "From B, we would discover T and set its distance at the distance to be just four plus the weight of that edge, which is three for seven.",
        "So far so good.",
        "Then we would explore from a and we would note actually that, you know, the path that goes to B through A actually only has distance three.",
        "So it's actually better than going directly to B from S, So we would update that and the algorithm of we would actually need to re explore from B,",
        "which we'd already done if we wanted to discover the shortest path to T, which we didn't do previously.",
        "We were, we weren't like re exploring from the same node multiple times.",
        "So the correctness ends up breaking actually the algorithm as we go.",
        "Now, you could deal with this problem quite directly by literally reexported from nodes whenever this happens, right?",
        "That was our intuition. So you could whenever you discover a shorter path that goes through ah given node you this second case,",
        "the one shown online 13 the if statement there we could simply re explore from it.",
        "When do we need to explore from it? Well, if it's already in the if it's still in priority Cuvier still in the priority queue,",
        "we can just reduce its priority, which is what we did previously.",
        "But if it's not in the priority queue and you want to reexport from it, you had it back into the priority queue for the new update priority.",
        "That's just noting. Hey, I want to make sure I explore from there again in the future. This fixes the correctness.",
        "So now Dijkstra's algorithm with these modifications will give you the correct shortest distance is even with negative edgeways,",
        "but it's not guaranteed to be efficient in the worst case. Indeed, there are examples.",
        "Ericsson includes one of the text. If you're curious, it's kind of a weird example where this can cause the algorithm to run an exponential time.",
        "So practically and Ericsson mentions this as well, if you have only a small number of negative edges and many real world graphs,",
        "this modification might be reasonably efficient and it's correct, might be totally workable.",
        "But if it's not, if this is slow and you want something else that is guaranteed to be polynomial time, what can we do?",
        "The Problem with Negative",
        "Weights",
        "4",
        "Dijkstra's Exploration Order:",
        "S, discover A, B, set d[B] = 4",
        "-3",
        "4"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=23&isPrimary=false&absoluteTime=13353104040.525",
      "start_time": 4140,
      "end_time": 4272
    },
    {
      "data": [
        "So we had a problem finding a valid iteration order over this in a different way than we have considered so far to deal with this problem is",
        "actually the original way that that Bellman and others who were working on dynamic programing thought about solving the shortest path problem,",
        "Remember that Problematic",
        "Recurrence for Shortest Paths?",
        "We should be able to solve the SSSP",
        "problem by computing...",
        "d(a)",
        "d(v) =",
        "o,",
        "1+ min d(u),",
        "otherwise",
        "Problem finding a valid order over the",
        "subproblems with cycles.",
        "b",
        "I + min( d(a), d(b))"
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=24&isPrimary=false&absoluteTime=13353104220.525",
      "start_time": 4320,
      "end_time": 4341
    },
    {
      "data": [
        "So we're only going to need to go that far.",
        "And then we just solve this problem where all of the vertices solve that particular parameter relation sub problem.",
        "This is the idea which you can formulate as a dynamic program and get what is called the",
        "Reparametrizing the Recurrence",
        "\u2022 Instead of d(v) SP distance to v, let's solve...",
        "\u2022 distsi(v) distance to v using at most i edges.",
        "distsi(v)",
        "min (u) +",
        "\u2022 How to evaluate this recurrence?",
        "For i = 1 ton \u2014 1:",
        "if i 0 and v = s",
        "if i = O and v # s",
        "otherwise",
        "If no negative cycles, no reason to take a",
        "cycle. Longest simple path has n-l edges."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=25&isPrimary=false&absoluteTime=13353104400.525",
      "start_time": 4500,
      "end_time": 4521
    },
    {
      "data": [
        "He assumes access to a vector processor that can schedule a parallel for the constant time.",
        "I prefer my machine model to just the general CPU.",
        "Which antigen. So that's why there's an extra log factor which is like a refresh rate.",
        "This one extra log factor. Yeah, it's from the parallel four. Okay.",
        "Yeah. Yes. That's so it's just a difference in like the assumption.",
        "It's not a difference. And like the solution. I see that's the question.",
        "But it's just really the last one so much as application.",
        "That's why not.",
        "That's quite challenging even though I had it you so I of pick it up on the right and then I found the answer about how much more power.",
        "But I just wonder how like I was looking for candidate s requirements.",
        "Just let me see how I can actually I should be able to give a good answer to this question.",
        "I mean, the question is, as general as I get this, which is how do I solve the problem?",
        "I don't know if I'll be able to get much wisdom about it at that level of generality, but if you want to try to drill down a bit,",
        "we can think about what is your process for problems when you feel stuck know,",
        "or what kinds of like examples of problems where you get stuck versus one where you don't feel a stuck or something.",
        "Maybe we can try and think of making progress in those cases.",
        "I don't know that brings anything to mind or if that's like a longer conversation that you",
        "want to get or will be looking at how either today or later my office hours after that,",
        "if you wanna want to talk about it some things. Yeah, yeah.",
        "There won't be a silver bullet. Yeah I think.",
        "And you'll get stuck sometimes like that's normal during algorithm design development that sometimes something will be obvious to you, right?",
        "Yeah, I think it's just like you have any things you can just look at."
      ],
      "image": "https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=242a3214-9c09-4f8d-b609-b11e0146bc74&sessionPID=46186341-87cb-4aee-ac8f-b0ce014752bb&number=26&isPrimary=false&absoluteTime=13353104580.525",
      "start_time": 4680,
      "end_time": 1000000
    }
  ]
}
