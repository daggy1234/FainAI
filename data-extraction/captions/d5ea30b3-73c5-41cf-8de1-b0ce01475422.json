{"data":[{"start_time":1,"end_time":45,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=0&isPrimary=false&absoluteTime=13356120301.013","captions":["Has it been long enough that you're no longer familiar with the, you know.","Uh, so you wouldn't. He got in trouble many years ago for, uh, like,","because it was found out that there were essentially fake classes for their players who registered for it didn't exist,","and nobody else go to school, and no one ever attended.","Uh, that's very I mean, yeah, I think I know a lot of, like, I really like I don't like this on the weekends.","No, that's what I mean. At least they register for classes that don't. I don't know exactly how do you like."]},{"start_time":120,"end_time":180,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=120&isPrimary=true&absoluteTime=13356120420.513","captions":["First, general announcements. Homework eight that's on flows and cuts is due today.","As always, there is a generous policy concerning a late period if you need an extra day or so.","Uh, and also as a reminder that I mentioned last time, two homework assignments will drop from the semester,","though I encourage you to try all of them for the sake of your learning and practice.","Homework nine on computational hardness should release later today through next week.","As per usual, there will not be any applied problems for this particular set.","So this will be a, uh, a purely theory problem set here of reductions.","In questions about general course announcements or logistics. Sheets.","Yeah. Uh, it's the last Monday, uh, for the late term exam.","It's approximation algorithms, which we'll discuss next week. Okay, here's what we'll do today."]},{"start_time":183,"end_time":216,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=183&isPrimary=true&absoluteTime=13356120483.513","captions":["We'll start by reviewing some of the complexity concepts that we introduced last class, to make sure that we're on the same page.","And then we're going to do some reductions. Basically we'll expand on that picture of known NP hard.","Indeed all of them and their decision variants are NP complete problems that we introduced last time.","We'll expand that picture a little bit, introduce some new problems and relationships between them,","see some more examples of how to argue the hardness of a problem."]},{"start_time":360,"end_time":405,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=2&isPrimary=false&absoluteTime=13356120660.513","captions":["We've seen several of these problems.","The complexity class P polynomial time efficiency is essentially everything we've studied in this course up until now.","Uh, class problems that are in this NP hard category include things such as Longest Path, uh, which again,","I mentioned this kind of like sometimes on specific subsets of input, we can solve this efficiently.","Longest path is an example of that, right.","When we talked about DAGs, we were able to develop an efficient dynamic programing algorithm for longest path.","But if you're talking general graphs, no longer the case necessarily."]},{"start_time":519,"end_time":540,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=519&isPrimary=true&absoluteTime=13356120819.513","captions":["Defining these. Again, just as a reminder, the complexity class is the class of problems for which there exists a polynomial time algorithm.","Most of what we have studied up until now NP this is a funny little thing, right?","Is it doesn't stand for not polynomial. Okay, so all like the class of polynomial time problems is actually a subset of problems in numpy."]},{"start_time":672,"end_time":720,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=672&isPrimary=true&absoluteTime=13356120972.513","captions":["Let me. I sort of said this out loud, so I'll just put this up here again, uh, and ask if there are questions on this particular topic.","The distinction between solving a problem, either in its optimization or its decision variant,","versus verifying the solution to the decision variant of the problem.","Three outstanding questions I can address on that.","Yes, we're in you heart that you can light only a jacket.","The proposed solution exists for community government of the problem.","Say there is a solution so no one see. Yeah.","So for NP hard. NP hard doesn't say anything about verification, but NP hard just says uh,","what it formally means first in a minute is that if you could solve this problem, you can solve everything in the class."]},{"start_time":741,"end_time":858,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=741&isPrimary=true&absoluteTime=13356121041.513","captions":["First defining later. I'll tell you what you do to actually prove a problem.","Is MP hard. Separate from this.","Okay a problem is NP hard is a polynomial time algorithm for that problem would imply a polynomial time algorithm for every problem in the class NP.","Okay. This is because we're trying, when we think about an NP hard problem, to understand the hardest problems among this class.","Most of us again, as I said, uh, believe that P is not equal to NP.","Most of us believe there is not a polynomial time algorithm for any problems that are NP hard.","NP complete is a stronger property than any part alone.","There are two things. For something to be NP complete, a problem must be NP,","meaning you can verify a solution to the decision problem in polynomial time, and it should be NP hard.","But again, NP hard is the one of those two properties that would matter most to you if your concern is,","should I expect to be able to find a better than exponential algorithm for this problem in either its decision or its optimization variant?","Now, you are not likely to prove that a problem is NP hard by using this definitional statement.","Okay, uh, someone had to do that.","And though some ones are typically credited as Cook and Levin in the very early 1970s who proved the Cook Leaven theorem,","that would be a seminal topic for a class on complexity theory.","Uh, but we are not going to prove the cook level theorem here. Suffice it to say, it demonstrates that satisfiability, including uh,","three satisfiability in that form and conjunctive normal form are problems of this type.","That proof of that theorem does not follow by a reduction from other NP hard problems."]},{"start_time":900,"end_time":1080,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=5&isPrimary=false&absoluteTime=13356121200.513","captions":["When I say up to polynomial factors this early proves that this problem p prime is at least as hard as p up to polynomial factors.","But if I know if I'm only arguing something about it being MP hard, I don't need that parenthetical.","So I want to prove that P prime is empty hard. What am I going to do? I'll start with a known NP hard problem P such as satisfiability.","Cook 11. Prove to us that is MP hard.","Great I'm going to use that. I start with a known NP hard problem.","From that problem I reduce to my problem of interest.","What does that mean? Given an arbitrary input to the known NP hard problem, you start with an arbitrary input to the known NP hard problem.","What will I do? I will construct an input to my problem of interest and essentially argue by contradiction.","I'll show you the form here in a second. But the idea is this I want to show that p prime is hard.","What will I do? Well, I know this other problem is hard. P suppose I had an arbitrary input to P.","What I'm going to show you is that if you gave me a magical algorithm for solving my problem of interest p prime,","I could use it to solve any input to the known hard problem.","That's essentially the structure of the argument. What do I need to show?","I'll argue the following. First, that the reduction is polynomial time.","You can do this in any order, but at some point you need to argue that the reduction is polynomial time,","meaning indeed, you could construct the input uh to uh y to p prime in polynomial time.","If it takes you exponential time to, uh, do this construction, then you haven't shown anything up to polynomial factors, right?","Second, what I want to argue is that, uh, the problem p on the input x is a yes instance if and only if, uh p prime problem p prime.","The one of interest to me on the constructed input y is also a yes instance, meaning I need to show two implications.","If the input to the, uh, known hard problem was a yes, then the constructed input to my problem of interest, P prime is also a yes.","And the other way, if the input to my problem with interest P prime is a yes, then, uh,","I would have had a yes on the original, uh, problem instance X to the known hard problem.","I'm going to say this in English and then take questions. I find this may be more helpful than the notation.","In other words, we want to show that a solution to problem p on x implies the solution to problem p prime on y,","y is constructed as we define it and vice versa, right?"]},{"start_time":1260,"end_time":1317,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=7&isPrimary=false&absoluteTime=13356121560.513","captions":["And that's what your people do. Okay. There are many known NP hard problems that you could try to reduce from.","Uh, we're going to have a finite menu that you will be asked to reduce from in this class.","So you don't need to consider reducing from any possible arbitrary NP hard problem.","There are thousands, uh, probably more than that.","But uh, however, choosing your P,","what problem to reduce from is actually a design choice and will always be trivial to say that you will have a choice there.","In general, there will be multiple such problems you could reduce from some of the might be easier to give a construction for than others.","Typically, you'll want to pick those that seem to share the most structural similarity to the problem you're trying to prove hardness of.","All right. If you want to prove a problem is NP complete, what do you need to do?"]},{"start_time":1374,"end_time":1440,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=1374&isPrimary=true&absoluteTime=13356121674.513","captions":["Uh, the first few we looked at were, um, sort of very easy reductions.","Those were between clique independent set and vertex cover.","Uh, reducing between those three is relatively straightforward.","It's usually like, you know, wherever you had an edge. Don't have an edge.","Uh, or you know what? Instead of k use n minus k or something like this.","It's a relatively simple transformation for most most of those.","Uh, and then we connected those graph problems back up in a kind of our hierarchy of NP hard problems,","back up to satisfiability by giving a reduction from three satisfiability to independent set,","which is sort of our first, uh, reduction that involved some not particularly straightforward construction here.","So let me just remind you about that construction. Before we get into perhaps some stranger constructions today.","Uh, here we were starting with reducing from three set, which we knew was NP hard from the good left.","Theorem two, uh, independent set in a graph."]},{"start_time":1620,"end_time":1800,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=9&isPrimary=false&absoluteTime=13356121920.513","captions":["and we try to find an independent set with at least k vertices, right?","Because for independent set it's harder to choose more vertices, like choosing no vertices, and certainly an independent set.","Choosing all the vertices probably is not. We're going to choose k to be the number of clauses from our original Boolean formula,","and we'll have three times k vertices, one for each literal in our formula.","I say for each literal because you'll know, for example, that we have the variable A appearing 1 to 3 times in the construction,","corresponding to the fact that A appears here, not A appears here appears there.","So I have three k of these, one for each of the literals in the formula.","Those will be our vertices. How will we connect our vertices? There are two possible reasons we might connected vertices uh to vertices.","One is if they are literals in the same clause. So I could have defined this a little bit more abstractly by saying.","For each clause in the Boolean formula, draw a triangle of its literals in the graph.","I didn't write it that way, because that would've been a little bit more abstract,","but perhaps if you zoom out a little bit, that's a more intuitive way to think about it.","So I have here A or B or C, and you will note I have a triangle here A, B, C with all of them connected together, and we have B or not C or not.","The uh where's that one over here on the right.","B or not, C or not D and so on and so forth.","So first think about drawing one of those triangles for all of the three literals in each clause.","We also draw edges between a variable uh and its negation.","So for example, uh, here, uh, we had this edge between a and not a between a and not a whole example.","Okay. That's the whole construction.","Now, what we argued last time was that there was a correspondence between a solution to that original Boolean formula and,","uh, a, an independent set in this graph, for example, I've drawn it here.","Okay.","If you here's an independent set of, uh, size equal to four in this graph, choosing the yellow shaded vertices on an independent set of size four.","Now over here, what I've done is just highlight all of the variables on the literals.","Excuse me, such that if that literal were assigned to be true, uh, they correspond to the vertices chosen in the independent set.","Okay. So uh, we chose a right.","So that means set any A literals to be true."]},{"start_time":1980,"end_time":2145,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=11&isPrimary=false&absoluteTime=13356122280.513","captions":["Yes. Let me repeat the directionality again. Right. We're reducing from three set to independent set.","We are trying to prove that independent set is hard.","By showing that I could solve the three set problem, which I know is hard.","If I could solve the independent set problem, I am not trying to argue the other way.","I am not trying to argue by this reduction. That three set is hard.","I'm trying to argue that independence set is one. Yes.","So. So for the problem. The second problem is very easy.","Yeah. Like what? Why do you have the length of the alphabet?","If you turn one instead of three, so it's at five.","That's why I. Say more about the output of what?","Exactly. Um. Like the. I guess what?","Like what? It tells us which function, uh, of which function is out of three.","So in the the question in the decision variant is yes or no.","Is there an assignment of zero and one to the variables that satisfies the entire formula?","Okay. Um, this correspondence I don't know if this is the question.","This correspondence of this is a solution corresponding to a solution to this independent set problem over here.","This we need for the argument, uh, in this case that, uh, in any case that this formula is satisfiable,","this graph will have a sufficiently sized independent set and vice versa, even if the answer is just yes or no.","But. Typically, if you can solve one of these decision problems with an algorithm,","the way it solves it is by computing such a solution as a certificate, especially for these decision problems.","Yes, I would consider reducing use.","It is worth it on the reverse because it isn't just like a bug.","Is that right? Yeah. So I'm not proving both ways precisely because of the point we discussed earlier.","I haven't shown you how to solve an arbitrary instance of independent set.","I've shown you how to solve an arbitrary input to satisfiability by using, if you have one, an algorithm for independent set.","That's the sense in which it's not totally, uh, in both ways though.","Actually, you can reduce this in both ways, but we've only shown one side of that."]},{"start_time":2160,"end_time":2274,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=12&isPrimary=false&absoluteTime=13356122460.513","captions":["where we are going today is first on a little branch over to, uh,","some kind of numerical sounding problems, uh, subset sum and partition in particular,","and then another branch to some more graph oriented problems, typically referred to as Hamiltonian cycle and path.","This is for reductions in total, some of which we'll try to do in detail, some of which we'll just sketch,","uh, going from these, uh, pink to blue ones, these are relatively easy reductions.","Um, whereas going from vertex cover to these shaded pink ones are a little bit more complex.","So this is what we'll try to do with the rest of our time today to see some more of these examples.","And then this picture, once completed,","will constitute all of the NP complete problems from which I will ask you to reduce as like problems you have to do in this class.","You will have an infinite set of problems that you're asked to reduce from, though there are many more, uh, such problems out there.","Yes, questions are removed using fraudulent vertex solutions such as um, but we're not reducing.","And so that's right. That's what I mean by this. Yeah.","In many of these cases you could reduce in the other direction as well.","Actually, I think there's a question on the in-class exercise about that.","Um, but these are the reductions we're going to show, which will be sufficient to show all of these repeat completed in each of.","So. All you need to do is to show you're in NP to program and reduce from a known inequality problem.","And the reason is sort of that we we have this like root of the hierarchy that we know has the desirable property.","Other. You going to show that this reduces this.","You don't have to give two reductions to show a new problem is simply complete."]},{"start_time":2340,"end_time":2439,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=13&isPrimary=false&absoluteTime=13356122640.513","captions":["Same total value?","For example, you could do that for our x by putting in one set one and five totaling six, and another two and four totaling also to six.","I have a question that sums up some problem. Sounds very much like that's a problem.","Yeah. So the question is subset sum sounds similar to the knapsack problem.","It is similar, but it is not quite the same. Uh, here in knapsack you usually have two notions.","You have like you want to optimize something subject to a constraint in its decision variant.","Then there are two things. Can you get at least so much value, uh, having imposing at most so much cost or weight or something.","So it's slightly different, but it is similar. We're going to reduce first.","This is the easier one to do first from subset sum to partition.","What does that mean? Just to remind you means that you could solve an arbitrary input of subset sum using an algorithm for partition.","And in particular, it proves that partition is at least as hard as subset sum up to polynomial factors.","If it happens to be the case, the subset sum is NP complete, and it is then.","This would also show that partition is NP hard.","It's not hard to see.","I'm not in general, going to belabor the point that all the problems we're going to discuss at this point in their decision variants are in NP.","Verifying the solution to subset sum in partition is not particularly challenging.","You add up some integers. So I will focus on the reduction."]},{"start_time":2520,"end_time":2700,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=14&isPrimary=false&absoluteTime=13356122820.513","captions":["So the sum was 12 twice. That is 24 minus the target of three is 21.","This is my entire construction. The input I'm going to give for partition is going to be all of X as well as a and B, okay.","I define two new integers. I add them into the set x.","That's my input to partition. Clearly this is a polynomial time reduction.","And I just have to calculate the sum of the integers and x and then do a couple of arithmetic operations.","Is it a correct reduction? What I'd like to claim for that is that subset sum on x with target T has a solution given on the ith partition on x.","And that's a union operator. So it means add this the elements of the second set into the first set uh and uh a and b.","So just adding these two new elements into the set, this is what I claim.","Right. So the construction itself here is pretty easy.","It might not be easy to see why it's correct, but the construction itself is really easy to find two integers adding to the set.","That's it. Let's do a running example again.","Uh, we already know there was a solution here. Okay. That solution contains the elements one and two.","For some particular set S, which is a subset of the original X.","We're trying to argue whether this with some to the target T or not.","I claim that it will sum to the target t that the sum of the elements in some positive solution","x will sum to our target t if and only if the following equality holds for partition.","Okay, so this is for that. Same as. Remember, everything that was in x is also in the input to partition.","So take all of the elements that were in S plus b, put that in one side of your partition and the other side of your partition.","For all the other elements from X that weren't in S plus M, I claim that'll be a valid partition solution.","If S was a valid subset sum with some t.","Let's see this magic happen. Take your S and add in B as I claim, and you'll get one and two and 21 for a total of 24.","Take everything that was an X but not S. That'll be four and five.","And in your A we get 4 or 5 and 15 for the whole 24.","So in this example what I'm claiming here. Right. Uh, in general in this example is that, look, these two things, which by the way,","comprise a solution, uh, to the partition problem we constructed, uh, that that's going to happen."]},{"start_time":2880,"end_time":3039,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=16&isPrimary=false&absoluteTime=13356123180.513","captions":["So that proves one direction, right?","If this is true, if this is a valid solution to subset sum, then this is a valid solution to our constructed partition.","That's the first thing we argued. Let's go the other way.","Let's suppose that we.","This indeed is valid of our constructed instance of partition, and try to argue that, uh, s would be a valid solution to the subset sum problem.","Good. If this is true, then let me just first rearrange it.","Just take these aside and say, well this is what the sum of the elements of S is.","I've just rearranged my supposition. I want to argue that this thing on the right is equal to t.","Yeah. What am I going to do? Oh, look, I defined a and B, I know what they are.","Let me put those in, uh, I guess some weird thing here.","Okay. Uh, do I need something clever at this point?","No. Uh, the remainder of the proof is algebra, uh, which I trust you to be able to do.","So gather your terms, cancel things out, rearrange them, and you'll find that some of the some of the elements of S equal to t and.","So the, uh, reduction here is not challenging in the sense that it's not complicated if someone tells it to you,","but maybe you wouldn't have thought of it immediately on your own. The argument, similarly, is not incredibly challenging.","It's most of the algebra. Sticking the two together is sort of challenging.","And indeed, I think this nicely demonstrates the idea that, uh,","very often one needs to be thinking about the the argument for correctness while trying to think about the right reduction.","Um, happens fairly frequently. Are there questions about the correctness of this reduction?","Yes. So when I of this, you just think of trying to prove that you them all and how you like them to be and.","You're right. So for example, here, it's like, well, I know the only input I get to give to partition is a set of integers.","So and it seems like I need it to be dependent on the set of integers from subset sum, right?","I like I need to relate it back to that. So probably I should use those integers.","So then it's like what other degrees of freedom do I have? I could add more things into that set.","What could I add into the set so that I could prove something like this?","Can't do something like this. Let me sketch for you the construction for a more complex argument."]},{"start_time":3060,"end_time":3240,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=17&isPrimary=false&absoluteTime=13356123360.513","captions":["Indeed, we'll show that subset sum is NP hard by reducing it from vertex cover from a graph problem, even a graph and an integer k.","Is there a vertex cover of size at most? Okay, that was our vertex cover problem.","Remember, vertex cover is a subset of the vertices, uh,","such that you include at least one endpoint of every edge and the opposite of an independent set.","Here's an example of a vertex cover on a small graph, where I labeled both the vertices and the edges by integers from zero up,","which normally I would not do because it's confusing, but it's important actually to this construction that I do.","So. Here's the idea of the the construction.","Again, we're trying to prove we know vertex cover is NP hard.","We're trying to argue that subset sum is NP hard. And we just argued already that if subset Sum is NP hard, partition is NP hard.","So this will connect to that branch for us. We need to what are we going to do.","We're going to construct an input to the subset sum problem.","What do we get to define. We get to define a set of integers and a target okay.","So I need to define a bunch of integers somehow.","And I need those integers to somehow encode the structure of this graph the edges in the vertices somehow.","So I want to solve this vertex cover problem using some constructed input to subset some.","I'll introduce an integer for every edge and for every vertex, and I'm just indexing the edges and vertices from zero up.","That will be helpful for the construction. And so we're going to define a set of integers x.","Let me tell you how we add elements to it. For every edge I write the edges are labeled zero and one.","So on and so forth. For every edge, I add the following integer to set by, which is equal to four to the ith power.","In our running example, we're going to try to encode these five edges for edge zero.","Here right edge zero we're going to add the integer four to the zero which is one.","It's going to be very convenient for me to think about this construction in base four.","So I'm going to write most of these in base four and then show you their base ten equivalent over here.","And base for this is just a one with a bunch of zeros before potentially okay.","Why is that helpful. Well, the thing now about the second edge labeled one here,","that's going to be four to the one that just shifts the one in the base four representation.","Right. This is four. And in baseball. Any guesses about the next edge.","The edge label two book edge label three.","Edge label four. And that's all of the edges now okay, so it sounds like a really weird thing."]},{"start_time":3420,"end_time":3600,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=19&isPrimary=false&absoluteTime=13356123720.513","captions":["In the decision variant of the vertex cover problem, we got a target like try to use at most k vertices.","We're encoding that with these leading digits. Remember each vertex has a factor four to the e.","That's why we have this leading k times four to the e one.","For each of the vertices we're allowed to select. So we encode that again with these leading digits two.","In this case in our running example k equals two. And then this.","This is the clever thing. This is encoding that we have to cover every edge.","There are different ways we could do that. But we have to cover every edge.","We somehow somehow have to encode that we could either cover an edge by choosing one of its endpoints, or by choosing both of its endpoints.","Okay. Uh, and this is why, uh.","We use this particular target. Right?","Yes. Question. So did you, um, back at target?","Does that add to the target? No no no. I mean, if A1 and A2 as they are in this example, are a valid vertex cover, correspond to a valid vertex cover?","It will happen to be the property that a1 plus a2 plus some other stuff is equal to the target.","So there's a relationship. But it's not. Just just choose the vertices.","We actually need these edge encodings as well.","I'm going to leave the claim up. Let me give you maybe the idea of how I want to reduce this.","So. Oh, yes. Um, how do you like what determines the latter part where it was, like, two times 40, I guess.","Yeah. As opposed to just, uh, you know, running example.","It was two because K was. So it's k times the leading digit value, uh, of a vertex in your encoding.","But in the, in the solution. Mhm. That, that.","That's right. So the other, the other two out of this.","Oh this is going to be important to the argument. Yeah. This is going to correspond to the two different cases for how we could cover an edge.","We have a piece of ice. Oh. Oh. Is that.","Is it just a coincidence that it's just. That we have four A's?","Um. Or. Yeah. I mean, like, so the A's correspond to vertices,","so you'll always have a number of a is equal to your number of vertices, and the b's correspond to your edges.","1 to 1 have one b for each edge and one a for each.","So we were trying to show this on a graph with five vertices.","Uh, would I do that on the first piece of art?"]},{"start_time":3780,"end_time":3876,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=21&isPrimary=false&absoluteTime=13356124080.513","captions":["In this case a two, you will note also has a one in that position corresponding to our encoding of the vertices for the edges that were incident.","On. The other possibility for how an edge could be covered by vertex cover is that we actually chose both of its endpoints, such as this edge two,","which is why it was important that we did not include that V term into our proposed set S,","because we're actually going to get that four to the I term from both vertex endpoints in the cover.","So for example looking at edge two we did not choose this v.","There was a one here. We got to account for this twice somehow to get our two times to the I.","Where do we get it from.","There's a one in that position in both of these vertices in the vertex cover, corresponding to the fact that those are both endpoints of this edge.","Let me, for the sake of time, leave the other direction to.","You can read it here if you want, or you can read it in Ericsson. Or you can try it for yourself.","This is not a trivial reduction. It's not impossible, but it's not something I would expect you to come up with in 10 or 15 minutes.","And you're not going to get asked to do a reduction like this on exam.","Um, but I do think it's worth seeing that sometimes a construction that is not obvious, uh, can nonetheless be possible.","So I'll leave the other direction to you. Let me make a statement."]},{"start_time":3960,"end_time":3993,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=22&isPrimary=false&absoluteTime=13356124260.513","captions":["What does this mean practically? It means yeah, there's an algorithm for subset some.","It works well when the target integer is not too big. But if the target integer is some stupidly gigantic number, it's going to start getting slow.","Okay. It doesn't even have to be stupidly gigantic. If it's large, you'll start to see a serious decline in performance.","So just an aside to clarify this concept. Let's give you a chance to chat with each other about subset."]},{"start_time":4140,"end_time":4320,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=23&isPrimary=false&absoluteTime=13356124440.513","captions":["But I think sometimes it's, you know, it's like, oh my God, in my life, I like that.","I don't like it. I think.","I don't. You guys. So I guess I just, I.","Just want you to cross over. Thank you.","Thank you, thank you, thank you. Oh my God.","So if I go wait for some some time also for the past so she could see the other numbers.","Yeah. Yeah, yeah. Yeah.","All right. Like feel like.","This is something that is in. So.","I it that's why I.","Like. To have a go.","Right. This is something that.","I. I.","Not. Oh, I know, I was really.","I must confess. I.","Didn't know the 32nd. So try to guess your best guess.","Yeah, I guess I do.","Oh, yeah? Yeah. So I can certainly.","See? Similar to this one.","I think. You have to.","Apply here. Is right.","All right. Let's take a look at these together. You might have noticed a couple of, uh, repeat customers here."]},{"start_time":4467,"end_time":4500,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=91a63e8e-01c0-4617-8f80-b1410136467f&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=4467&isPrimary=true&absoluteTime=13356124767.513","captions":["And that is and there are these other two problems there.","The last two problems, uh, that we'll discuss in this context.","And yeah, you can get reductions from them as well,","if you want all of the reductions that will ask you to do for recitation or homework will be from problems we've discussed or introduced,","uh, or these, uh, you can read these here or in the textbook, talk a little bit more about them next Tuesday as well.","Have a lovely afternoon and take care of. Stay complicated."]},{"start_time":4680,"end_time":1000000,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=087f03eb-cc3a-4df1-8918-b141013632f4&sessionPID=4b956690-f002-4afc-b937-b0ce0147541a&number=26&isPrimary=false&absoluteTime=13356124980.513","captions":["Why. Because I'm just using like it's a year right now and I want to represent.","Yeah. So I got a number.","I just totally understand. Why do you think it's a question of constant factors or asymptotic factors, which you could tell?","For example, when you're looking at the smallest at large inputs?","Is there a time off by like, you know, I'm like twice as slow as the downside?","Or is it like for some of them it's like different orders of magnitude of time or something.","Well, I would say it's not too different, but it's you know, I would say yeah,","that's another way you can tell it's like is the factor difference like my speed divided by the number.","Is that factor growing in the scanner. Yeah.","Messages that probably there's something has to phonic about one of the the instructions.","Right.","That there's some operation that's being repeated that like could be done o of n but it's taking moments where it could be log in to events like that.","I'd have to look at the details of the implementation.","I see a, uh, an adjacency matrix is probably less common as a graph data structure for implementing the search algorithms,","but I don't immediately know that that's the problem. And you said you tried it with like an adjacency list representation as well.","But the thing I'd be looking for is if there's somewhere I don't like a neighbor or an edge look up or something like that,","uh, in linear time, would it be constant time or something like that?","Uh, and my guess again, if you have a very similar algorithm,","if you and someone else like that through an algorithm together because it's much slower.","Python I'm much it's probably something different.","Something like that would would be my intuition here.","Right. Thank you. Do you like the optimization?"]}]}