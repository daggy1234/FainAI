{"data":[{"start_time":1,"end_time":27,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=0&isPrimary=false&absoluteTime=13354136701.04","captions":["It's our. You know, I think in the midst of all this stuff."]},{"start_time":132,"end_time":180,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=132&isPrimary=true&absoluteTime=13354136832.54","captions":["But first, some announcements on your homework on shortest paths, which is the last thing that is due before spring break is due this Thursday.","So make sure you take a look at that if you haven't already. Today is also the last day of the exam regrade request period.","If you need to request a regrade if anything was incorrectly graded and next week we won't be here.","I mean, you can come here if you want, but I won't be here, and probably nobody else will either,","because next week is spring break, and I hope you're looking forward to that.","Whether you travel or not, there is no hesitation when you get back from spring break.","So don't don't forget about that. Spring break is one week, not two weeks.","Just don't forget. Any questions about announcements or logistics matters of."]},{"start_time":186,"end_time":222,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=186&isPrimary=true&absoluteTime=13354136886.54","captions":["We're going to do today, we're going to introduce greedy algorithms in general,","and we're going to look at a particular canonical problem in the language of graph rhythms.","We're going to look at the minimum spanning tree problem. We'll see a couple of ways to solve that.","And one of the ways to solve that utilizes a particular data structure with which you may or may not be familiar.","And I will say with a time remaining a few words about that data structure and how it can be efficiently implemented,","that would be the disjoint sets or union fine data structure you'll find.","All right. So that is our agenda for today.","First, what are reading algorithms?"]},{"start_time":360,"end_time":396,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=2&isPrimary=false&absoluteTime=13354137060.54","captions":["Just as in the case of Dijkstra's algorithm, it is not trivially obvious and it requires some careful thought and consideration","that indeed this returns the true shortest path and is not immediate or obvious.","It's a very standard form of an error that people make when they first get into optimization.","Algorithm design is to describe a greedy algorithm.","When asked why it is correct, they say something that essentially translates to, well, it's greedy,","or at each step I am trying to optimize the thing, which doesn't necessarily connote all of the time that the overall solution is optimal."]},{"start_time":525,"end_time":540,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=525&isPrimary=true&absoluteTime=13354137225.54","captions":["Here is just one of those for a problem that we studied before that has an incredibly natural,","greedy algorithm, perfectly reasonable outcome and described.","That is not correct. This is the knapsack problem zero one knapsack problem, you may remember."]},{"start_time":687,"end_time":720,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=687&isPrimary=true&absoluteTime=13354137387.54","captions":["Really, algorithms, I would say broadly in algorithm zone are useful for optimization,","typically easy ish to design, typically efficient ish compared to other algorithms that you might deploy.","Typically hard to prove correctness or harder to understand the correctness than some other algorithm design techniques.","We'll talk a little bit about that this week, and typically useful, for approximation,","one of the most common ways of designing a fast approximation algorithm, which we'll discuss a little bit later in the semester."]},{"start_time":726,"end_time":765,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=726&isPrimary=true&absoluteTime=13354137426.54","captions":["traditional combinatorial discrete algorithms, greedy algorithms, but really, algorithms are not a toy or a niche thing.","In fact, they have a very deep connection to the way that we optimize machine learning algorithm or models.","And I will talk about that briefly very late in the course.","And part of the bonus real materials that you might have heard of before, you might be interested, I don't know,","in machine learning, this is where we try to build models that predict things about the world based on data.","What does it mean to learn a model from data?"]},{"start_time":900,"end_time":924,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=5&isPrimary=false&absoluteTime=13354137600.54","captions":["Why is it used then?","Well, because it's efficient enough for us to use it and it is hopefully moving in the correct direction towards a maximal solution.","So that's just again, I want you to understand this.","Like even beyond the cases where we can prove correctness, the algorithms are deploying in significant and serious ways in the world."]},{"start_time":933,"end_time":1047,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=933&isPrimary=true&absoluteTime=13354137633.54","captions":["We've been talking a lot about connectivity, depth for search and shortest paths,","but sometimes we don't necessarily care so much about shortest paths as we care just about connecting everything,","ensuring that we have some degree of connectivity and maybe we want to do that as cheaply as possible.","Okay.","So for example, and this is the canonical example that this problem was originally studied, and suppose that you are designing an electrical grid,","you have a bunch of transformers, you have a bunch of power suppliers,","you have a bunch of residences or other locations that you would like to wire together.","You don't necessarily care about whether the electricity comes to your home along the shortest path from the supplier.","I suspect maybe that's important to one of you. I don't know.","But most of us probably don't care about whether it comes along the shortest path you individually,","what you do care about if you're designing an infrastructure grid like this is that everything is connected.","Electricity moves really fast. It's constantly flowing. As long as it's getting to the location, we're good.","But what I need to figure out is a way to connect everything and among all ways of connecting everything,","I would like to choose one with low cost overall.","For example, I would like to lay the least amount of electrical.","Line that I have to in order to ensure connectivity of the grid.","You can think about this in the case of electricity grid, you can think about this in the case of a communications or an Internet or a bandwidth","grid in general for any of these kinds of optimal network formation problems.","You have a problem like this where we may not necessarily care about shortest paths."]},{"start_time":1080,"end_time":1248,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=6&isPrimary=false&absoluteTime=13354137780.54","captions":["and there may be more that you possibly could install than you need to just to ensure connectivity the weights would correspond to.","How costly would it be to install this particular connection, to build this road segment, to install that bit of wiring, etc.","That's what you would like to compute or to choose is a set of edges.","In general, this will be a subset of all possible edges that you could choose that connect all of the vertices by connect all vertices.","I mean that for any two vertices there should be a path between them using only the edges.","You select it okay with no cycles.","So it should be a site. That's the sense in which it should be. In terms of minimum total length.","There's an example drawn here on the right where the red edges are the minimum spanning tree.","You will note that they connect the graph in the sense that if you pick any two vertices on the graph,","there will be a path between them using only red edges.","It will never be necessary to use any of the black edges to get from one vertex to another.","You could always use the red edges. A couple of other interesting observations to make.","One is that if you solve this problem, it's a cyclic and it connects all of the vertices.","It will have exactly the number of vertices minus one edges.","I'll let you think about that for a while. If you wish. Any tree on any vertices will have exactly and minus one edges.","And indeed this will be a tree. By definition we want no cycles.","And by the way, I wouldn't even have to put that in the definition of the problem if I assumed that the edge weights were positive,","as perhaps they are, and most of the most natural applications.","If I, if I said in the input here that the edge weights were all positive,","I could have just said compute a set of edges that connected to a minimum total weight and","it would be implicit that you would never choose a cycle because if you chose a cycle,","you could have gotten rid of one of those edges without changing the connectivity, and that would have had positive weight.","If I don't tell you that all of the edges have positive weight, that I need to say explicitly, no cycles.","And because possibly they will, I'll just keep choosing negative weight edges.","So that's kind of a border case.","In the normal case, if you think about the edge weights being positive, that's a little bit redundant to say those cycles.","Questions about the formulation of the minimum spanning tree problem.","So it turns out we've already computed spanning trees before.","If I gave you a connected graph, for example, this one,"]},{"start_time":1260,"end_time":1395,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=7&isPrimary=false&absoluteTime=13354137960.54","captions":["Well, that's an exhaustive search. It turns out that that shortest path tree would on this connected graph also be a spanning tree.","Here, for example, would be the shortest path tree starting from the vertex A if you did a single source shortest path search starting from a tree.","This graph, you'll note that it's spanning that there is a path between all pairs of vertices.","You'll also notice that it's a cyclic. So you might think, Great, we can just do that to compute a spanning tree.","And if it's a shortest path tree, then it's kind of trying to choose lower way edges, right?","Like it's trying to choose shorter paths from one point to another.","So a natural temptation is to think that this should be exactly equal to or quite related to the minimum spanning tree.","But it turns out it very much is not the minimum spanning tree.","Here is again, just a simple counterexample to that of the same graph where I chosen the minimum spanning tree of lesser cost.","Okay, the minimum spanning tree only cares about the total cost adding up of all of the edges.","It cares nothing about the distance along individual paths,","whereas the shortest path tree cares about shortest paths from the source vertex to all the other","vertices and is not necessarily concerned about the overall total cost of all of the edges.","They are both problems that end up computing spanning trees.","They are both minimization problems, but they are different minimization problems and the solutions are different.","Meaning that if you have a shortest path tree, no guarantee that it's a minimum spanning tree.","If you compute a minimum spanning tree, no guarantee that the paths between vertices on that minimum spanning tree are necessarily shortest paths.","You can see that in this example. The path on the minimum spanning tree between A and B is to go from A to B to C to D of total cost","six whereas in the original graph you could have gone directly at weight for so no such guarantee.","However, the solution is still a tree, so it does still have the nice property that there will be a unique, simple path between any pair of vertices."]},{"start_time":1440,"end_time":1500,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=8&isPrimary=false&absoluteTime=13354138140.54","captions":["It's just kind of a a trivial or vacuous tree.","And so what we're going to maintain at any given point in time is a spanning forest of the graph with multiple components,","each of which will be a tree, some possibly as vertices by themselves.","We will choose more and more edges as we go along, which will connect previously disconnected components.","And we will continue to do this until we have ourselves a spanning tree.","And the question, of course, is at each step of that procedure, which edge should we choose?","Next, the greedy principle will be to choose the cheapest edge,","and we're going to see there are multiple ways you could parameterized that notion of choose the next cheapest edge."]},{"start_time":1620,"end_time":1731,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=9&isPrimary=false&absoluteTime=13354138320.54","captions":["Pascal's algorithm says no such parameter is,","and each step choose the next cheapest edge that does not create a cycle among the edges I have already chosen.","That is one way to characterize Russell's algorithm, choosing the next cheapest edge that does not create a cycle among the edges.","I have already chosen with no consideration about building up one particular tree.","As you see, in the case of premise algorithm, you could alternatively characterize Protocol's algorithm as at each step,","choose the next cheapest edge that connects to previously disconnected components of the spanning forest.","So you will note that at a high level premise algorithm builds up one tree bigger and bigger.","Pascal's algorithm, by contrast, continues to choose edges that continue to merge.","So it's kind of working on multiple disconnected trees at once.","In some sense, both of these are breeding algorithms for the minimum spanning tree problem.","Both of these algorithms are correct, even though they are slightly different and there may be many cases of that.","We'll see another example of that next class. When we look at scheduling problems where there may be multiple correct formulations","and multiple incorrect formulations of a greedy algorithm for a problem,","are there questions about the basic picture of premise algorithm, Costco's algorithm, before we get into the details?"]},{"start_time":1800,"end_time":1980,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=10&isPrimary=false&absoluteTime=13354138500.54","captions":["so I'm going to maintain the invariant that my priority queue at a given point in time will","contain all of the edges with exactly one endpoint in the tree I'm building up so far.","So it's going to maintain all of the candidate edges that I could choose from.","In the next iteration, it'll be a min priority queue because what do I want to get at each iteration?","I want the next cheapest such edge to consider.","So I'll start by initializing for arbitrary vertex and the edges that are incident on it in the for loop.","Unlike for just looking at the edges instead of on that one vertex and adding them into the priority queue.","Then I'll iterate until I'm done. I just wrote at a high level of pseudocode while F is not spanning.","Right, But really it's going to be until you choose exactly and minus one edges.","You can think of it that way. There are different ways you could formulate this loop condition.","While you don't have your spanning tree yet, what am I going to do?","Well, I'm going to choose the next cheapest edge with exactly one endpoint in my solution.","So far I am storing those in my priority queue, so let me just remove that minimum weight edge from the priority queue.","And now I need to actually check something. I need to check to ensure that this would not create a cycle,","that this actually connects to a new vertex because there might be stale edges in this priority queue,","the addition of which by the point I examine them, would actually just create a cycle.","Among things I've already connected. So I'm going to check that online.","Eight. If this edge would create a cycle, then I just ignore it and move on.","Otherwise, if this edge connects to a new vertex not already connected to my partial solution,","I will add that vertex and its corresponding edge to my partial solution.","That edge UVM considering to my minimum spanning tree so far.","And then what I need to do, I need to expand my frontier.","There are more candidate edges now than there were before,","which new edges are now candidates that were not before precisely those that are incident on the new vertex I just connected to.","Those are the new edges. I had not already had my priority queue as candidates that I now must consider as candidates for expansion.","And so I'll add all of those. And then at the end, when my career spanning, I'll return my edges questions about the details of Prince algorithm.","Other than correctness and runtime, which we'll look at the moment, begins with a White House searching for prints algorithm.","There won't be there will be vacuous, Leigh, in the sense that each individual vertex we haven't connected to is its own tree in the partial solution."]},{"start_time":2001,"end_time":2160,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=2001&isPrimary=true&absoluteTime=13354138701.54","captions":["This example moves from left to right and then down to the left again to complete.","So let's suppose that we start at this vertex here at the bottom of the graph as our arbitrary initial start vertex.","Initially we add the edges that are inserted on it into our priority queue with wait for 14 and 26.","Okay. The cheapest of those.","The next we will pull out of the priority queue in this wait for edge and indeed is an edge to a new vertex that we had not previously connected to.","So we will choose that edge and then we need to expand our frontier by adding the incident.","The new incident edges from this vertex.","So we add these two edges here into the priority queue.","The bolded black waits now correspond to waits for the edges that are in our priority queue along our frontier for expansion.","The cheapest of all four of those in this way, well edge indeed goes to a new vertex, so we will choose it in our solution for our greedy algorithm.","We must then again expand our frontier. So starting from this vertex we add two, three, 30, all of these edges into our priority queue.","Now we look at all of the edges. The cheapest one, the next one to be removed from the priority queue will be this way to edge.","Again, it goes to a new vertex, so we will include this in our minimum spanning tree.","We expand our frontier by considering additional edges from this vertex, the 1 to 8 and of wait ten.","Okay. So far we've been building up our solution kind of like in a little path.","It almost looks like we're doing a shortest path search or something like that.","But note that that's incidental. Not always the case at this point.","The cheapest edge in our priority queue or in our frontier for expansion is not incident on the vertex we just connected to.","It's actually another one incident on a previous vertex.","We'd already connected. Okay, so you're not necessarily just going to compute a path here or just go down along paths or anything like that.","We'll instead choose this edge which connects to a new vertex of Wait three,","and we'll expand along its frontier to include these final two edges of waits five and 16.","At this point, the cheapest edge on the frontier is this one of five.","Again, it's to a new vertex, so we will choose it. Add this to a partial solution.","At this point, maybe this is a little bit more interesting.","So at this point, after we choose this edge,","if we five note there was this edge of wait eight in our priority queue that was still in the priority we had to remove again."]},{"start_time":2199,"end_time":2340,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=2199&isPrimary=true&absoluteTime=13354138899.54","captions":["Let's look at the other variant then. Cresco's algorithm, customized algorithm.","Remember? Didn't try to just build up one tree over time.","Instead, at each step, it just chooses the cheapest edge that doesn't introduce a cycle overall,","or in other words, the cheapest edge that connects to previously disconnected components of your spanning forest.","So Cresco's algorithm visually is going to kind of work on multiple trees at once, slowly connecting them to one another.","How do we do this? We want to choose the next cheapest edge to consider at each step.","We don't need anything as fancy as a priority to actually,","because there's not really anything dynamic about that in the way there was for Grimm's algorithm.","So instead, you can just sort the edges and again initialize our spanning forest.","We're going to use an additional data structure. I'll talk about this later called a disjoint set where you can find our structure.","I will introduce the three operations we need to support here.","Okay. The first will be a set operation to initialize Protocol's algorithm.","Let me just denote that initially before I've chosen any edges.","Each of my vertices is its own separate component of the spanning forest.","I haven't connected anything. They're all in their own lonely little sets.","Okay, now I'm going to consider all of the edges after I've studied them,","so I'm going to consider the edges from cheapest to most expensive, from least way to greatest weight.","And each iteration, I'll take the next edge, the next cheapest edge.","And what do I need to check? I need to check if adding this edge would create a cycle or not.","If you create a cycle, I don't want to add it because it would be connecting things that were already connected by some other path.","If it does not create a cycle, then it does connect to previously disconnected components and I will choose it.","Okay. How would I do this with my data structure?","I'll use these two operations. Fine and union find.","Given one of these elements, one of these vertices should return the label of the set to which it belongs.","Okay, so here I just asking I say is find you not equal to find me."]},{"start_time":2520,"end_time":2631,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=14&isPrimary=false&absoluteTime=13354139220.54","captions":["The next cheapest edge is this one of weight ten Again, that would create a cycle so we don't choose it.","The next cheapest way is this one of weight 12 which would not create a cycle.","We will choose it. And so on and so forth.","In this case, for this particular example, I believe the minimum spanning tree is unique.","That's not guaranteed. In general, we compute in this case then the same solution, but using a different approach or algorithm.","You will note the order of the selection of the edges is somewhat different.","Questions about the execution of Crystal's algorithm.","So you practice the same thing I did?","Yeah. In particular, the edge we've chosen so far. It's just the essential thing.","Yes. So both of two algorithms potentially choose different standard genius works that we could possibly do.","That's the question. There may not necessarily be a unique minimum spanning tree, meaning that's there off about which one you would get.","Then even if you're running just one algorithm, just premise algorithm, it could depend on where you start, for example.","QUESTION So there is, I guess, are these people.","So how to compare and contrast the algorithms.","They are equally good in the sense that they both are correct, will return optimal solutions and we'll argue that in a moment.","Are the differences in terms of runtime are in some ways subtle and I'll look at that in a moment.","In most ways I think the highest level it is that these algorithms are roughly interchangeable.","There are nuances on that, but that's the highest level thing to understand."]},{"start_time":2700,"end_time":2880,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=15&isPrimary=false&absoluteTime=13354139400.54","captions":["it could be multiple linear or the edge UVA, depending on how you want to label it be the minimum weight edge between components of s.","Possibly there could be multiple in which case take any of them at the minimum weight edge between components of F.","If F is a subset of a minimum spanning tree, then either it spans all the vertices and it just is the whole minimum spanning tree or not.","If not, then it has to have some components that aren't connected yet because it's not spanning yet.","Hey. Consider the cheapest edge minimum weight at between components of.","My claim is that there will be another minimum spanning tree, possibly the same one, possibly not,","but there will be a minimum spanning tree where adding that edge to your partial solution so far would still be part of the minimum spanning tree.","In other words, it is safe to add that edge.","This is the substance of the argument of the correctness, for example, of cross algorithm.","If you can prove this, if you then wanted to prove that cross schools algorithm was correct, what step of what kind of argument is this?","The inductive step of an inductive argument, which is the hard part of the argument.","You want to prove the principles algorithm is correct, essentially right in inductive proof over the selection of edges.","And this is your inductive step. This is the meat of the heart of the matter that we'd like to discuss is why, given this partial solution,","it is safe to choose the next cheapest edge that connects in the current partial solution","that that will necessarily still be part of a globally optimal solution in the long run.","Yes. Question about the statement, right.","So if that is a subset of the MST here and then it became like the minimum and that connects components of that,","then like if we're just starting, for example, with crystals connected to nodes, then that's our MST.","It's just those two nodes. Like, I guess I'm, I'm confused on like how they would be components or cast.","Is it like components of like entire graph trees in the spanning forest?","So the question is what do I mean by components of a partial solution?","So again, keep in mind that here we're always thinking about we have a spanning forest, which is a set of trees initially, and we've chosen no edges.","Our spanning for us is just all of the vertices in their own trees by themselves.","And then that's what I mean by components. By a component I mean interchangeably."]},{"start_time":3060,"end_time":3087,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=17&isPrimary=false&absoluteTime=13354139760.54","captions":["Let it be the minimum wage between the components of f e prime, which was in an optimal solution, is an edge between these two components.","E was the minimum weight edge, so its weight must be at most that of the prime.","Let me consider them exchanging these two in a solution."]},{"start_time":3240,"end_time":3420,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=18&isPrimary=false&absoluteTime=13354139940.54","captions":["and it does lead to a globally optimal solution to medium spanning tree,","as opposed to merely a solution that tries to make local really steps in this case.","This is also a good example of a fairly typical form of argument for a greedy algorithm and exchange argument where you attempt to understand","the structure of an optimal solution and compare a possible step or choice in your algorithm to some part of the optimal solution.","Sometimes people might call this a so-called charging argument as well,","saying essentially that what we are doing here is trying to say that for this edge e that our algorithm is choosing,","we can charge its cost, we can bound its cost,","we can say definitely that cost was justified because there had to be this edge e prime in the optimal solution of at least that cost.","Okay. Questions about this argument.","Other than if you just want to digest, which I would recommend.","So I just like a clean English saying you have to put on the crop, either connect them with a more or less expensive version.","I would say more deeply that even if you do connect them with the cheaper edge, that won't miss anything up in the future.","That's how I would phrase it in plain English. You won't have accidentally made a mistake that will come back to bite you seven generations from now.","That's usually the greedy algorithms.","The fact that what you're doing is optimal for the next step is usually trivially obvious and just a restatement.","The thing you're usually worried about is. But will this lead to, you know, come back to bite me to be something that's wrong,","like seven iterations from now when I choose something in the future? That's what's at stake here.","Yes. And it's something that that. Yes, that there must from the first lady.","We looked at that there must be some such e prime in an optimal solution that connects these two components.","Because the optimal solutions are spanning, you have to connect the components somehow.","You can't connect the components without some edge crossing. Yes.","Yes. My question is about the previous algorithm and how it relates to this argument for the first,","and it's not about any hundred and the minimum edge in the tree that then selected on the very first looking,","for example, where you pick an arbitrary vertex to start.","Now you pick an arbitrary vertex to start out with in premise algorithm.","So you want to slightly modified this, but the idea is exactly the same. You can actually argue something much stronger than this,","which is that just if you're curious and I'll I'll put you to Erickson's text if you're interested, read more.","But you can actually do something stronger than this, not just at the minimum weight edge between any components, but for any component."]},{"start_time":3513,"end_time":3549,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=3513&isPrimary=true&absoluteTime=13354140213.54","captions":["Let me just know that that argument kind of works trivially.","If instead of you want to do a minimum spanning tree, if you want to do a maximum spanning tree,","then it turns out your greedy choices should be maximum greedy choices like priority queue sorted by","greater weighted edges first or across goals algorithm going from greatest to least weight edges,","and then running the same algorithm and essentially the same argument will show you that those adaptations will give you a maximum spanning tree.","So you can do that rather straightforwardly in this case. Let's think about the runtime of these algorithms characterizing this."]},{"start_time":3600,"end_time":3735,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=20&isPrimary=false&absoluteTime=13354140300.54","captions":["If we use, for example, emerge or on the edges thereafter, it kind of depends on this data structure that I haven't told you a lot about.","First off, we do. That makes sense.","Let me assume that we can make all of these sets in linear time or that we can make each individual one in constant touch.","Then we're going to loop over and iterations.","We're going to consider each edge potentially, and on a given iteration, we have to do these fine and potentially union operations.","So the runtime of these of this algorithm will depend, of course, on the runtime of these data structure operations.","Suppose you can do this in log in time. I say suppose that because you can, with the disjoint sets, data structure,","then overall you would get a runtime complexity of m log in if you prefer to say in log M.","That's fine too, because M is at most n squared, right?","And square would be inside of the logarithm. Whether you say log n or log M is kind of interchangeable asymptotically.","Okay. So you should think of these algorithms as being roughly interchangeable in terms of runtime,","assuming that the find in union operations are logarithmic in complexity.","They would exhibit similar scaling. Yes.","Kids when they're inside of the locker room, I said, and are kind of interchangeable.","And the reason is just because of rules of logarithms. So if you have.","Because so far. Right. And the number of edges is at most the number of nodes squared and just rules of logarithms, log and square is to log in.","So that's what I meant by there. Asymptotically interchangeable. All right."]},{"start_time":3780,"end_time":3960,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=21&isPrimary=false&absoluteTime=13354140480.54","captions":["What are you going to tell the city if you really don't understand the people that.","I were. And I don't want to do that.","Yeah, Yeah, you can.","You can. You know.","How are you telling me that I'm going to be like, Oh, yeah.","Okay. So it's not like it's hard for me to follow my cycle of Let's get excited.","So I don't know what it is.","I feel it's very, very interesting.","I wonder if it is more likely that the out and you have something else that I'm like, Oh my God, Like, how do you like?"]},{"start_time":4140,"end_time":4188,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=23&isPrimary=false&absoluteTime=13354140840.54","captions":["Isn't that what it is? No.","I just want you to talk to me about that, because I guess I agree with you.","Like. It's hard find.","Going to be."]},{"start_time":4287,"end_time":4320,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=c5eac380-5236-4c5b-966b-b12a0146e3c2&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=4287&isPrimary=true&absoluteTime=13354140987.54","captions":["where you want to partition in Des Moines in the K clusters so as to maximize minimum","distance between two points in different clusters or distance between clusters,","so to speak. This is another style of clustering that someone might do.","It's commonly used. It's called a form of single linkage, hierarchical clustering.","It's also called that this one has a view of a pie chart, certainly a uniform.","That's the most popular area. Most popular is can be solved."]},{"start_time":4500,"end_time":4680,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=f89c600c-d4c3-4418-87d0-b12a0146c51e&sessionPID=e02e74f3-2f1f-4ba8-a1d0-b0ce0147531c&number=25&isPrimary=false&absoluteTime=13354141200.54","captions":["T was supposed to be a minimum spanning tree.","So indeed, the minimum spanning tree, in conclusion, would not have selected the maximum weight edge along this cycle.","Well done everyone with the fun new question type. We'll stop there for today.","We'll talk a little bit more about spanning trees next time and then we'll talk about region scheduling.","I look forward to seeing you there to hear everyone. Wow.","Mean. What we're where I am right now.","I could probably tell you why.","I think it's one reason.","If we don't have a negative light, You think it's because that's what it says?","Montana State University negative Web site that it should espouse, meaning it's never going to be the site of choice would never be necessary.","You go around the site. So that's a positive way.","But back to where you started, I didn't receive any reporting. What would be the point?","If it's the shortest path, you could just not go around the site, the site and the finish line for the length of the shortest path in the most","important algorithm is a space optimization of the dynamic program that we develop.","It sorts of problems in order the shortest path using one,","the shortest path using two and the shortest path using the first three and using it both for edges and so on and so forth.","So why is that outer loop of two and minus one in the final?","So problems we're going to solve are the shortest path using at most and minus one.","And if you don't have negative cycles,","you don't need to consider shortest path with more energy structurally in the graph to help the memory optimize for other routes or ones.","I want to be this one right here.","If we look over at every edge, right? Yeah, exactly.","Which that's the same looping structure as in the previous version that we had developed that was not overly optimized.","The difference is there we explicitly stored the solution to some problems also parameterized by like I in and out of loop.","Whereas in the Belmont four we realized we don't need to store all of those separately.","So it shaves a factor of and off of the number diamonds."]}]}