{"data":[{"start_time":1,"end_time":3,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=0&isPrimary=false&absoluteTime=13350075901.035","captions":[]},{"start_time":39,"end_time":159,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=39&isPrimary=true&absoluteTime=13350075939.535","captions":["As a reminder, you can see the full schedule on the course website.","Those are going Sunday through Thursday evenings. So today will be the last evening this week.","They're helper hours and then they'll start back on Sunday, I believe.","Also as a reminder, if you're looking to join helper hours in the evenings,","we do have a large class and we do have a large number of teaching assistants staffing every shift.","We are using a queuing application on my digital hand to ensure that we're able to manage a large office hours with multiple staffers.","So please make sure you sign up and use that if you don't know what I'm talking about or how to do that.","Then just come to help our hours and ask a teacher, Hey, how do I use the queuing thing?","And they can help you out. All right. Our first recitation will be next Monday, the 22nd.","Also, I think there's going to be an event in the hall out there. Yeah.","Thank you. Those are who are coming in kind of at the end. If you can close those doors in the back, I'd appreciate that.","Thank you very much. Our first presentation will be next Monday, the 22nd.","And I'll say a little bit more about that in a moment. Make sure you go to your recitation section.","Simple enough. And finally, homework.","One is available on canvas as a reminder. That's due next Thursday.","The homework. If you are looking for a partner, you don't already have a number you'd like a partner.","You'd like to be introduced to someone.","We release a form in a canvas announcement earlier today that you can submit if you'd like us to introduce you to a partner.","We do not assign partners. I don't force anyone to work with anyone they don't want to.","On the homework assignments for the course. So this is simply a matter of We will introduce you to other people who are also looking for partners,","if you would like that all of the homeworks are perfectly doable by yourself if you would prefer.","And let me say a little bit more on the recitation side of things with respect to announcements,"]},{"start_time":180,"end_time":360,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=1&isPrimary=false&absoluteTime=13350076080.535","captions":["or to exercise your memory and your mind, which is what I'm hoping you'll be doing in a supportive environment with lower stakes in recitation.","I do not want the very first time in the semester that you have to think about a problem from scratch.","Just sit down for 5 minutes and think, How would I tackle this on my own with a piece of paper and a pencil?","I do not want the first time that happens in your semester to be on an exam, which is why you'll see on the homework assignments.","I encourage you when you first look at a problem before you do anything else, just sit down,","Just you paper a pencil and your mind and think, How would I tackle this and try that for a few minutes to sketch an idea the for you.","Then go and look for additional resources such as your notes, such as your peers,","your partner, teachers, etc. We're going to do the same thing in recitation.","So here's what you can expect. In addition to introductions and announcements and things of that nature and getting to know each other.","You can expect that broadly speaking, recitation.","We've broken down into three sections, a think section where you'll be thinking about problems on your own with the ability to ask Tas for help.","If you are stuck in a pair section where you will be paired with a recitation partner Tas will help to make sure that","each of you has a partner for your recitation and you can get together and discuss the ideas you've come up with so far,","the ones that you're stuck on and try to work through the rest of the problems together as a pair.","After you've had a chance to think about it on your own. And then finally a share phase where multiple of your pairs in your recitation","will share your ideas for how to approach the problems to the larger class.","And again, you'll note that two is going to help at any of these stages. So Tas will be facilitating recitation.","Not teaching a new lecture recitation will not be like another lecture.","Where someone talks at you for an hour, recitation will be about you exploring how you would solve problems,","answered questions, discussing with your peers Tas or there throughout to help by answering questions if you get stuck.","To facilitate, to share tips, things of that nature.","Think we will give so that you can see everything all at once and don't need to have laptops out.","You will get a handout at the start of recitation with the problems or questions for that day.","Probably just like a one major for the first recitation that'll probably have many shorter review style problems for later recitations.","And we're talking more about algorithm design that might only have two or three problems of","the nature design an algorithm for maybe not an obvious problem or something like that.","So this will be like a problem solving seminar, a chance for you to discuss with your peers.","So we'll have a no laptops, kind of a policy.","I recommend that you bring a pen or a pencil so that you can take notes for scratch on your handout page or your own notebook, if you prefer."]},{"start_time":390,"end_time":462,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=390&isPrimary=true&absoluteTime=13350076290.535","captions":["Runtime analysis proved by induction. We were intentionally quite formal with things because we wanted to introduce you to the","structure of a formal mathematical argument to review or introduce things like induction.","For those of you who maybe Rusty, you haven't seen it recently,","etc. in the context of an algorithm that I think you had seen before and that we were reviewing.","In that case, it was binary search. Today we're going to go on to talk about the other main way that we do algorithms.","Your favorite and my favorite way of designing an algorithm. Recursion.","And we'll talk a little bit more about proofs of correctness in the context of recursion and a little","bit more about runtime analysis in the context of recurrence relations or a recursive algorithm.","That's what's on the agenda for today. This will be leading us into where we're going because for the next several weeks we will be thinking about","designing recursive algorithms using divide and conquer style approaches with parallel algorithm design,","and that'll be more divide and conquer. And with dynamic programing in depth first search, so much more recursion coming up in our future."]},{"start_time":540,"end_time":606,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=3&isPrimary=false&absoluteTime=13350076440.535","captions":["So here's for example,","a recursive binary search that avoids loop by instead using the parameters L and R to the procedure to keep track of the current search range.","And then if it doesn't find the target in a given step, rather than changing those variables and continuing to iterate in a loop,","instead we just make a recursive call changing those parameters for what the search range now is.","Otherwise the algorithms are equivalent. This is a common trick.","Let me remind you of this. Perhaps jog your memory from days bygone that a recursive algorithm you will often use more parameters.","You might over parameterized the procedure in order to keep track of the sub problem that you're looking at.","So for example, in this search, we're using L and R to keep track of the search range.","We've added those two additional parameters to our recursive to use in our recursive calls to denote the sub problem.","We're looking at the sub range researching n as opposed to those which were variables in our earlier iterative algorithm.","That's relatively common. Let's look at some simpler iterative and recursive algorithms."]},{"start_time":720,"end_time":744,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=4&isPrimary=false&absoluteTime=13350076620.535","captions":["what we do is instead recursively calculate the maximum element of the first and minus one elements of the array,","the largest of the first and minus one elements. And then we simply check if the last element is larger than that.","Okay. An alternative perspective on algorithm design."]},{"start_time":846,"end_time":900,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=846&isPrimary=true&absoluteTime=13350076746.535","captions":["When you are designing a recursive algorithm, I typically think in the following sort of fashion, first about the base case.","As I said, when is the problem small enough that I can solve it without using iteration and recursion?","I can just immediately answer it. Okay. The simplest form.","Often when the input is of size one or of size zero, something like this, for example, the maximum of a single element.","When you think about the recursive calls, you ask, what is the answer to the same problem?","Such as the maximum value from an array on a subset of the input.","For example, the first and minus one elements. And then finally,","the question to ask yourself when you are using the results is how could I use the answer to","the sum problems I just got from the recursive calls to somehow answer this larger problem,"]},{"start_time":1047,"end_time":1080,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=1047&isPrimary=true&absoluteTime=13350076947.535","captions":["Let's look back at our example of a recursive algorithm for calculating the maximum value out of an array.","And let's actually trace the execution, which I will remind you again is not the most helpful way to design this algorithm.","I'm thinking design, and I'm thinking, when is it trivial to answer the maximum value?","Well, if there's only you're asking for the maximum of one thing.","Okay, then I can write the base case and then I think let me get the answer on a subset of the input.","What's the maximum of the first and minus one elements? Trust that recursive very online form."]},{"start_time":1260,"end_time":1272,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=7&isPrimary=false&absoluteTime=13350077160.535","captions":["But we'll look at several others as well that will result in trees when you make multiple recursive calls."]},{"start_time":1440,"end_time":1452,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=8&isPrimary=false&absoluteTime=13350077340.535","captions":["rather than going down the rabbit hole of What about the next one and what about the next one?","And so on and so forth. The recursive algorithm for calculating the maximum value out of an array might have been fairly simple or boring to you,"]},{"start_time":1620,"end_time":1770,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=9&isPrimary=false&absoluteTime=13350077520.535","captions":["Okay, so I have x and I double y and I make that recursive call rate.","I'm still not in the base case. X is three, x is however now odd.","So I'm in the case on lines four and five, so I'm going to make another recursive call.","Note two are multiply on again having x rounding down that would be one and doubling y.","I'm still not in the base case. X is still odd, so I'm going to be in the case on lines four and five again.","I'll take X, have it round down. That'll be zero one divided by 2.5.","Round down is zero and I'll double y again.","Now we have arrived at our base. Case X is equal to zero.","So what do we do there? We just return zero online three.","Okay, we return zero back. Now we're in our multiply 140 x.","That was where x was odd. So we were online five.","We're going to return y. Y is currently 48 plus whatever the result of the recursive call is, the result of the recursive call was zero.","So we return 48. Now we're in our multiply 324 again, three was odd,","so we're in this case on line five we're going to return and y y is 24 plus whatever was returned, 48 with return.","So 24 plus 48, we're turning 72 now.","We're in this final our multiply of 612. The first call that we made is even because the X is even here because it's six and so we're on line seven.","We simply return whatever we got previously, which was 72.","And lo and behold, indeed, six times 12 is 72.","Some of you might be convinced now that this algorithm works. In some cases, I.","Very much hope. And if it's not true already,","I hope to inculcate the spirit in you by the end of the semester that you should have a healthy suspicion about","whether this algorithm always works or whether we just got lucky on the example that we tried to contact."]},{"start_time":1800,"end_time":1980,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=10&isPrimary=false&absoluteTime=13350077700.535","captions":["or I hope the teacher will tell me if it's correct or not. But you all are now going to be a little further along in your computer science education.","You're going to be going out into the world in a year or two. You're going to have an algorithm.","You're going to have to figure out if it's working correctly, and there's not going to be an answer in the back of the book,","which is one of the reasons why we study techniques and analysis with algorithms in this class, because the answer is that is often not obvious.","It is a good question whether an algorithm is correct and how you would build evidence or convince someone else that it is correct.","There are only two options. You can write a mathematical proof.","That is to say, you can write a rigorous proof.","Restating what the algorithm does, as we discussed last time, doesn't actually build confidence that the algorithm is correct.","Or you can test experimentally. Okay.","For example, you can try looking at edge cases, you can look at counterexamples or small examples by hand, or you can try automated tests.","I'm not a dogma artist. I think both of these things are helpful to do.","Honestly, for building intuition, though, they are different things.","As we discussed last time, no number of small examples that you try proves that an algorithm is correct on all inputs.","Similarly, even if you've proven that your algorithm in its pseudocode is correct mathematically,","that doesn't mean you won't make a bug when you implement it. So I think both of these are helpful and useful.","I'd like you all to consider a recursive algorithm coming up in a second and think about how it works and think about its correctness.","Let me just briefly show you the algorithm that you'll be looking at.","First, This is maybe a motivating example for why recursion is so lovely and so beautiful.","You can often write very short, simple, arguably in the item holder, elegant recursive algorithm to solve problems.","For example, we're gonna be talking more about sorting algorithms. Here's my favorite recursive sorting algorithm.","And one of the shorter that I know how to write, it's, I think, ten lines of code, including the procedure definitions.","And if I had a swap primitive, it would have two fewer because lines ten, 11 and 12 are just swapping two values.","Right? This is a recursive sorting algorithm.","One of the ways that we can and I again think this is a good example where unless you are very different from me,","when you examine this code for the first time, no light bulb immediately goes off in your head and says, ding, ding, ding, that's a correct algorithm.","Or and that's definitely wrong. You have to think about it.","It's not obvious. You probably start thinking about it by trying some examples.","And then if you want to convince yourself it's true that it is correct in general,","perhaps you would attempt to prove, well, here are some examples to build a little bit of confidence.","I'm just going to do some ten random examples here and see what happens.","This is one way to build evidence that an algorithm might be correct."]},{"start_time":2022,"end_time":2160,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=2022&isPrimary=true&absoluteTime=13350077922.535","captions":["It's efficiency and its correctness. Please take a moment with your partners.","Feel free to stretch, if you like, or to have a conversation as you do this. We'll come back in a few minutes, something like that, I would never say.","Put your money where your mouth is.","Oh, my God.","I know he is helping you with your money.","Yeah, Yeah. It's more of a culture of fear factor.","You know, every business continues.","You see, I was never the greatest actress.","Yeah, that's pretty much like.","You know, I think in terms.","Of course you have to.","We felt like. Don't have the to learn how to speak and I guess."]},{"start_time":2196,"end_time":2340,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=2196&isPrimary=true&absoluteTime=13350078096.535","captions":["Afghan nurses have.","Just as much as I. You're not going to see me.","I thought I was going.","Were. Like nine, six, something like that.","Oh, yeah, yeah, yeah.","I. This is not as I know I describe it.","I mean, even if I go to Jacob once, I think I was standing right here and I'm like, I got it right here."]},{"start_time":2490,"end_time":2520,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=2490&isPrimary=true&absoluteTime=13350078390.535","captions":["I like.","All right. Let's get together and let's settle some of the raging debates about our shorts."]},{"start_time":2700,"end_time":2880,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=15&isPrimary=false&absoluteTime=13350078600.535","captions":["P So our P would be the worst case runtime complexity of insert.","It makes more sense to analyze the helper function first rather than the main function first, both for efficiency and for correctness.","Because the efficiency and correctness of insert does not depend on the efficiency or correctness of our sort.","Insert does not call our sort,","but the correctness and efficiency of our sort does depend on the efficiency and correctness of an insert because it calls it.","And so we'll start with insert linear complexity for insert.","Now what about the R sort algorithm?","Well, it starts with an input size in the base case as well and gets down to zero, in which case there's nothing left to do.","The entire array sorted.","Otherwise, in the recursive case, make a recursive call on an input of size one less and we make a call to insert on the same size.","Insert, we've already argued has a linear runtime complexity.","There could be a total of and recursive calls starting from n going all the way down to zero.","And so we get a total runtime complexity of any square in this case.","This, by the way, is the recursive formulation. Let me leave that to the only question at the end.","Actually, hold your thought on that one for the third question.","It is important. Is it important? This is the question.","Is it important for the correctness that insert online sex comes after the recursive call to our sort on line five?","See what you thought most of you thought.","Yes, it is important and indeed it is.","There are multiple ways to see that. One would need to try to to prove that the algorithm is incorrect.","If you swap the order, if you put in cert for first and an hour sort second.","How do you prove an algorithm is incorrect? And anyone?","Oh, dear. I saw in the red.","Yeah. I was given a counter case or a counter example.","If you want to prove your algorithm is incorrect, all you have to do is say, Well, here's a valid input.","Here's what the algorithm returns for that. And that's not correct. Okay.","So you could approach it in that way. You could say, let me try swapping our circuit, our sort and insert and then let me find a counterexample.","There will be many. And they don't need to be large. When you're looking for a counterexample, I always try to find a small counterexample first.","So I would try with arrays of size two or three first to find a counterexample","rather than starting by writing down a length 20 array and checking correctness.","Alternatively, just from a design perspective, if you had thought about like what is the recursive logic of this algorithm, it is as follows.","This is how I thought about it. When I was designing the algorithm, I thought, okay, I want to sort an elements."]},{"start_time":3060,"end_time":3165,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=17&isPrimary=false&absoluteTime=13350078960.535","captions":["QUESTION Why of all, why the first instead of the last?","Yup. Like, how would you think about that? The way that I would spot that looking at the algorithm.","There are two answers. One is I knew it because I was designing it that way in my head.","But the way that gets translated into what you see in the algorithm is note how the sub problems change and know how to help her.","It's called when we make a call to a sub problem, we go to one smaller right and we make a call to the helper.","We pass the index of the end of whatever range we're looking at right now in minus one.","We start with that element and we look at swapping it earlier into the array rather than looking at swapping things later into the array.","Indeed, you could write a symmetric version of this algorithm that the recursive calls sort the last so many things,","and then the insert operation looks at the first element and pushes it further.","Bonus question. What is this sorting algorithm called?","Yeah. So I mean, there is this just circus involves or it is not a recursive bubble sort of suggestion and yeah, this is an insertion sort.","Yeah, but a recursive formulation of insertion sort.","You remember when I said that a lot of iterative algorithms and recursive algorithms can be done interchangeably?","You may think of insertion sort as an iterative algorithm.","Well, here's a recursive algorithm that does essentially the same logic."]},{"start_time":3171,"end_time":3195,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=3171&isPrimary=true&absoluteTime=13350079071.535","captions":["Just to remind you, for an iterative algorithm, typically the induction is over the iterations for recursive algorithm.","The induction is typically over the sub problems, often parameterized by their sizes,","Where what we'll try to argue in the inductive step is that a correct solution to a smaller sub","problem implies that we will return the correct answer to the larger sized problem of interest."]},{"start_time":3240,"end_time":3270,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=18&isPrimary=false&absoluteTime=13350079140.535","captions":["then what should I do to return the correct answer to the larger problem?","That is the same reasoning that we engage in when we argue inductively for correctness.","We basically want to argue a bunch of sub claims that, hey, if end is equal to one, we return the maximum on the first element.","If it is equal to, we return the maximum on the first two elements.","If in a three, we turn the maximum of the first three elements and so on and so forth.","And we want to argue all of these claims inductively."]},{"start_time":3420,"end_time":3495,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=19&isPrimary=false&absoluteTime=13350079320.535","captions":["just the structure questions about that before we look at maybe a more interesting example.","Yes. So in this example, the base case was one and it equals one.","But in the example of what so the base case was and it was zero and there was no there's nothing here.","So how, how do you differentiate between like what should be your base case?","The question is, you know, here the base case is input of size one.","In other examples, we had a base case where the input of, say, zero.","How do you decide those? The answer is it's problem specific.","So when we were sorting, it makes sense to ask if you've got no elements to sort do nothing.","It also would have made sense for us to define the base case as if you have an input a size one.","How do you sort that do nothing. Both of those would have been reasonable in that case.","For the maximum algorithm here, it's actually a little tricky if you ask what's the maximum of zero elements, it's not well defined.","So I defined the base case and equals one because the maximum of one element is well defined.","So it's problem specific in that way. Let's look at a more interesting example."]},{"start_time":3600,"end_time":3780,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=20&isPrimary=false&absoluteTime=13350079500.535","captions":["So here's how we complete this case. You bring out my pointer.","The first step here is substitution from the algorithm.","That's all I'm doing. In this case, where X is odd, I look up at my algorithm and I see, Oh, in this case I return r y plus r multiplied this.","I've rewritten that. I'm simply substituting precisely what the algorithm does.","Then what am I doing? I'm saying, well, you know, I can simplify the X over to the flawed two x minus one over two because of the case.","This is the case where X is odd for an odd integer like three.","I'm claiming that the floor of an odd integer over two is equal to the odd integer minus one over two.","I'll let you check that for yourself. Think about it. Three divided by two is 1.5.","Four two is one, three minus one is two divided by two is one.","Now hold more. General fact, I'm just simplifying that using the fact that I'm in the case where X is odd, then what do I do?","I use the inductive hypothesis. X minus one over two is smaller.","It's a smaller value, right?","So by the inductive hypothesis, I'm assuming that this returns the correct answer on this smaller input with respect to the size of x,","meaning I can get rid of this procedure call now that's just equal to the correct product of x minus one over two and two Y.","And I still have that y plus out front. This is where I'm using the inductive hypothesis, assuming a correct answer for smaller cell problems.","Now I'm just simplifying with arithmetic and the twos cancel out and I get y plus x minus one times y.","That's equal to x times y, just simplifying. I'll leave case two for you so that you never get too bored.","If you want to convince yourself that indeed this multiply procedure is correct.","You need to consider the other case as well. The steps would be very similar to this.","Yes. Question You have also asked why this case was like zero.","So the question is, could we also have done the induction on why would have been trickier for the way we wrote this algorithm.","If I did the induction on why, my inductive hypothesis would be suppose the algorithm is correct for smaller y values,","but on a recursive call, y wouldn't necessarily get smaller, it might get bigger.","So in this case, induction on X will be the easier way to do it.","Now, in some sense this is a trivial distinction for this because you could always just when you take his input,","you can swap what's X and Y in the algorithm. This algorithm will give you the same answer if you swap X and Y."]},{"start_time":3861,"end_time":3936,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=8c8269c9-4025-4b4f-b056-b0fb0146e4ca&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=3861&isPrimary=true&absoluteTime=13350079761.535","captions":["Indeed, I know that all of you have written recursive algorithms on trees before.","Into one, for example, the height of a binary tree.","I'm going to do an example of this. The height of a binary tree is defined as the number of nodes on the longest route to leaf path.","Note that that definition lends itself to a recursive formulation of calculating the height of a binary tree because the number of nodes on the","longest route to the path is one more than the number of nodes on the longest route to leave a path in neither the left or the right subtree,","the one more being the root itself.","And so indeed, you can calculate recursively using this formulation the height of a binary tree where the base case is.","If you're looking at null, an input of size zero and empty tree, for example, you just return to zero.","Otherwise you return one more than the maximum of or the larger of the height of the left subtree or the height of the right subtree.","And this algorithm will correctly compute the height of a binary tree."]},{"start_time":3960,"end_time":4119,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=22&isPrimary=false&absoluteTime=13350079860.535","captions":["And what that looks like in terms of, you know, what it gives you when you're making an argument, the base case, you're looking at an empty tree.","Then there's really nothing interesting here. An empty tree, okay. To the input is going to be null.","The height of the empty tree is zero, which is what we return. Very interesting.","The inductive hypothesis will typically be something of the form that the algorithm returns correctly.","The height of the binary tree where all trees of size up to something.","Okay. And the inductive step will be let's consider an arbitrary tree with a size one greater than that.","Okay? And argue that the algorithm returns the correct thing on that input.","Note that unlike, I think all of the examples I've shown you so far, this is the first place where it will be important.","Oh no, the previous example is the same as well, where it will be important that we're doing so called strong induction.","That is to say the inductive hypothesis.","We're supposing that the algorithm is correct for tree trees of all sizes less than K rather than just specifically K minus one.","Okay, let's consider this arbitrary tree with K nodes.","Consider the height of the tree rooted in r. I'll call that h r the height of its left subtree h l and the height of its right subtree.","H r. Let those be the true heights. Then, by the inductive hypothesis,","line five is returning when he returns one plus the maximum of the height of the left","holding the procedure on the left subtree or calling the procedure on the right subtree.","That's equal to one plus the maximum of the true height of the left subtree or the true height of the right subtree.","Precisely what the inductive hypothesis buys us is that we will assume the correctness of the recursive calls.","That's precisely what it's going to bias in the argument. What is left to do, which is not very interesting in this case,","is then simply to consider the two possible cases of the max and to show that indeed","we're going to return the correct height of the tree overall in either of those cases.","This, again, is not an incredibly interesting example. You can review it if you wish later.","The more important thing I wanted to know was the structure in particular of both the strong induction and the idea that even on a tree","you are basically your inductive hypothesis is to suppose that the result of a recursive call on a smaller sub problem is correct.","That's that's typically the structure of an argument."]},{"start_time":4140,"end_time":4248,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=23&isPrimary=false&absoluteTime=13350080040.535","captions":["Now consider adding a node to this tree. Okay.","This is not the structure of inductive argument. The reason is when you write something like this,","it's no longer clear that you're in your inductive step that you're considering proving something about an arbitrary tree of size.","K You might be, you might not be.","It depends on when you say if we add a node to this tree.","Okay, well, how are you adding a note to that tree in all possible trees of size?","K be constructed by the particular way of adding a node that you are considering in this example?","So one has to be very careful with writing things like this, but it's a natural temptation.","So just always remember in the inductive step you want to consider an arbitrary input of the larger size.","That's where you start from. Yes, actually, the most difficult line.","On through the cases when it too.","And I was struggling to understand why that recursive code works in for kids too.","Specifically. Is it supposed to say one close h r equals L, or is it supposed to say.","Oh, I see what's happened. Anybody else see what happens? Yeah.","We use it for two different things. Overloaded variables.","So I'll fix this in the slide later. I suspect that's confusion. So.","So what we need is the height of the left subtree, the height of the right subtree and the height in the subtree root in a bar.","And WS are. My apologies. So I'll fix this in the typos here."]},{"start_time":4320,"end_time":4434,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=24&isPrimary=false&absoluteTime=13350080220.535","captions":["you can translate this quite directly into a recursive algorithm to calculate the Fibonacci number.","This is not an efficient algorithm, by the way, and we'll talk more about that later.","We also use recurrence relations to characterize the runtime complexity of recursive algorithms.","It turns out that's a useful way of characterizing the number of operations in a recursive","algorithm across recursive calls because we can write it with a recurrence relation.","Let me tell you what I mean. Suppose the T event is the number of constant time operations as a function of the size of the input.","We'd like to calculate here then to get a runtime bounce for some procedure.","We can think about the base case, which will typically be that on an input of constant size,","let's say the runtime complexity is at most some constant. That's certainly true here in the base case,","we just return something alternatively on an arbitrary size input, how many constant time operate of size?","N How many operations are there? Well, we'll make a recursive call on line four on an input of size n minus one.","So however many constant time operations there are on an input a size n minus one,","That's what I'm writing when I write t of n minus one, plus some other constant operations.","If you look at this code lines five through eight,","all just constant time operations and then a way to try to get the runtime complexity of the algorithm is to try","to solve 40 of N from this recurrence only in terms of N without any recursive terms in the expression next.","So you'll see a lot like one way to approach trying to figure out the runtime complexity of recursive algorithm","is to characterize its runtime with the recurrence relation and then attempt to solve that recurrence relation."]},{"start_time":4500,"end_time":4680,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=b83b5907-b0c1-44f6-bb88-b0fb0146d188&sessionPID=3086a7e3-7949-4778-8852-b0ce0147519a&number=25&isPrimary=false&absoluteTime=13350080400.535","captions":["Now you could also go in the former direction starting from what happens in the base case.","Well, it's at most a constant and then asking, well, what happens on the input of size too?","Well, the recurrence relation says that's t one plus some constant and t of one was also some constant t of three do the same thing.","That's T of two plus some constant and so on and so forth.","Until you get to t event and solve it this way. Sometimes you will call this by unraveling or by substitution.","This is maybe in the most straightforward way.","There are additional ways that we'll talk about in the context of solving divide and conquer algorithms next week.","Thank you all. Have a good day. Just a small exercise because this.","But enlightenment has three small. If of that.","This algorithm is bigger than any upper bounds.","I know I want to be free, but I need the other.","I need a greater than. For example.","For example, in this case, for example, I found something like this.","Yes, I know that the state of isn't the only way to do this.","I doubt what you're asking is different.","I am not for you, but you're asking how do I tell if it's all of it?","All of it is the best I like no different than anything else.","So if you go to take this text.","That's true. It just might not be the most useful stuff. Exactly.","And not know that the asymptotic equality in the data is when you have a matching upper and lower power.","Bigger and bigger. Okay. You know?","I think so. I'm not sure yet.","I'll try to speak loudly if this applies to both of you."]}]}