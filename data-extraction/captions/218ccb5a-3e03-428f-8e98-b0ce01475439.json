{"data":[{"start_time":1,"end_time":9,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=0&isPrimary=false&absoluteTime=13356552301.043","captions":["Okay. Okay.","Okay. Okay. I can never look back."]},{"start_time":180,"end_time":216,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=1&isPrimary=false&absoluteTime=13356552480.543","captions":["I will say at the outset that that is not the only interesting kinds of algorithms that are deployed in","the real world for optimization style problems that do not come with a guarantee of exact correctness.","Indeed, there are many algorithms that are deployed with no guarantees about, in the worst case, how bad the results might be.","Uh, but are used nonetheless because they are efficient enough to be used at scale.","A good example of that would be the way that we train large neural networks,","for which we can provide no guarantee of the form we will provide today, that they are approximately optimal in any sense."]},{"start_time":270,"end_time":312,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=270&isPrimary=true&absoluteTime=13356552570.543","captions":["The logistics will be the same as the midterm exams. So this is just like a copy of the midterm exam slides.","It'll be in class, it'll be written. There'll be four problems. You'll have 75 minutes.","You only need to bring a writing utensil. You may not bring a calculator or notes or anything of that nature.","B closed book closed note please try to arrive a few minutes early that day so that we can get seated and start distributing,","but we will not begin prior to 125 to the beginning of class time.","If you have, uh, other exam accommodations, uh, you'll be taking the exam at the same time,","but at a different place than you should expect to hear from Alex Chow on the place and the details in the coming couple of weeks.","All of this is the same as the midterm exam. Content wise, the late term exam, the oldest topic that will be covered on here are shortest paths."]},{"start_time":360,"end_time":372,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=2&isPrimary=false&absoluteTime=13356552660.543","captions":["and also to help to prepare you for assessments.","So I hope that these problems will have prepared you well for the late term exam."]},{"start_time":468,"end_time":540,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=468&isPrimary=true&absoluteTime=13356552768.543","captions":["Let me start by recapping what I concluded with last time, which is the Hamiltonian cycle and path problem, uh, surrounding NP hardness.","Just the last couple of problems I wanted you to have in your toolbox, uh, for thinking about NP hardness and reductions and things of that nature.","There are, of course, many, many, many NP hard problems out there in the world.","Um, we're only considering a finite sampling of them to use for possible reductions as exercises to demonstrate the idea in this course.","Uh, but you can read about many more if you're interested. We'll also introduce approximation algorithms and what we mean by that,","and the relevant quantity that we want to measure or improve upon the approximation factor.","And then we'll look at two canonical examples, one of which I'm confident we'll finish, one of which I am not confident we'll finish.","The first of those will be job scheduling and make span minimization.","So it's a scheduling problem similar to some of those that we looked at, though a little bit different when we discussed greedy algorithms.","And indeed we will use a greedy algorithm for this problem.","But this greedy algorithm will not be correct in the sense of guaranteeing an exactly optimal solution,","but we will attempt to argue that it is an approximation algorithm in the sense that in the worst case,","it will never give you a solution worse than twice the cost of an optimal solution."]},{"start_time":576,"end_time":684,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=576&isPrimary=true&absoluteTime=13356552876.543","captions":["This is I give you a graph, and I asked you in the cycle case whether there exists a cycle that visits every vertex exactly once.","That's the decision form of the problems. There exist a cycle in the graph that visits every vertex exactly once.","Uh, this problem I claim is NP complete, and is one of those you might be interested in giving reductions from.","Indeed, we'll get one later today. It's closely related, cousin.","The Hamiltonian path is the same thing. But for path instead of a cycle, is there a path?","A simple path in the graph that visits every vertex exactly once?","Okay, I'm going to first tell you why these two problems, in terms of their hardness are related to each other.","Then I will just very briefly show you literally a sketch,","an actual picture about a reduction to show that Hamiltonian cycle is hard by means of reduction from vertex cover,","which is a much more involved argument you can find in Erickson if you are interested,","so that we can connect our whole hierarchy of reductions in hardness all the way from satisfiability.","But first, the easy one. Let's just relate the cycle and the path problems together.","I'm going to reduce from Hamiltonian cycle to Hamiltonian path, which as you all know,","means I'm going to argue that you could solve Hamiltonian cycle if you had an algorithm for Hamiltonian path,","which is a way of arguing that Hamiltonian path is at least as hard as Hamiltonian cycle up to polynomial factors,","I will give a polynomial time reduction. So what does such a reduction look like?"]},{"start_time":720,"end_time":900,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=4&isPrimary=false&absoluteTime=13356553020.543","captions":["So in principle I could use the same graph.","But actually I want to modify it a little bit because I want to argue that in this new graph I'll call it g prime that I'm going to construct that.","Finding a Hamiltonian path in the constructed graph corresponds 1 to 1 with a Hamiltonian cycle in the original graph G.","Here's my construction. Pick your favorite vertex. I got four vertices in this graph that I'm going to use as an example.","Remember I'm going to have a picture here. The picture is an example.","It's just to help us to understand it's not the reduction is not just an example, but it's the general argument.","Take an arbitrary vertex v okay. Uh, I like the letter.","So I'm going to pick a and the example. Construct a graph G prime.","We're just going to have a vertex set V prime and an edge set E prime as follows.","Here's my g prime. I'm going to construct the vertices in my graph.","G prime are going to be all of the vertices that were in G.","So I start with all of those same vertices and I include three additional vertices one I'll call an s source,","one I'll call a t for termination of target,","depending on how you like to think about it, and one that I'll call v prime the prime,","because it's going to kind of be a clone of the vertex v that you chose arbitrarily, which in my case was a.","So here are my vertices. Then I have the same ABC and D that I had in the original graph.","For this example, I add an s and a t and I.","Also I'm going to add in a prime because a is what I selected as my arbitrary vertex from the original input graph.","Now how do I connect this? The edge set is as follows.","First, take all of the edges from the original graph.","Okay, I'm only going to add additional edges. What additional edges will I add?","I want to turn what was a cycle in G and know there is a Hamiltonian cycle and G like ab is DC.","Okay, if I go follow this around a, b, d, c a right, there's a cycle visits every vertex once.","Okay. Uh, I want to turn a cycle in that original graph G to.","This is all the vertices into a path in this new vertex g prime.","Somehow. Uh, guess what? That path is going to have to start in in somewhere.","So I'm going to use S and T to be the places it's going to start and end.","For example, uh, and then I'm going to use a and a prime as these arbitrary uh vertex that I selected.","And then I'm going to clone it so that I can get in from s and out.","Uh, and excuse me, out from S and into C.","Let me show you how we do that. I'm going to add an edge from S.","I want my Hamiltonian path to start of this s uh, to the arbitrary vertex I selected from the original graph."]},{"start_time":1080,"end_time":1167,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=6&isPrimary=false&absoluteTime=13356553380.543","captions":["Okay. So there would be a corresponding Hamiltonian path in G prime.","The question of connecting these times d.","The purpose of connecting a prime to t to be to t, I think.","Uh, yes. In this direction. For the reverse direction.","Suppose that G prime has a Hamiltonian path.","Of some form. Something that starts at S and goes around to back up and ends at T.","Then if you just remove the s and the T, you would end up with a Hamiltonian cycle from your original graph G.","This is not a very involved, uh, reduction, but it's enough to demonstrate, uh,","and you can do it the other way as well, by the way, like reducing from path to cycle is also relatively easy.","Um, so the point here is that you can from a computational tractability perspective,","you can think of Hamiltonian cycle and path as being essentially the same.","And if you want to reduce from either one of them to demonstrate hardness, that would be fine either way."]},{"start_time":1260,"end_time":1365,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=7&isPrimary=false&absoluteTime=13356553560.543","captions":["There are these, uh, multiple vertices corresponding to that edge connected in this crisscrossing pattern.","Then for each vertex,","you'll note that all of the edge gadgets corresponding to edges that were incident on that vertex in the original graph are connected by a chain.","So, for example, for the uh v vertex, which just has these two edges incident on it in the original graph,","you'll note that V corresponds to this section of the constructed graph,","and that it's incident on two of these criss cross gadgets connected by a chain.","Whereas you had three edges incident, you'll note that U over here corresponds to this region, and there are one, two,","three of these edge gadgets connected by a chain for you, connected to all of the regions corresponding to the other vertices.","In addition to all of these gadgets and chain connections of the gadgets,","there is a sort of a super source and sink vertex into which everything is connected.","I don't expect you to follow the logic of why this is correct from this picture.","I simply want to show it to you a so that you know that indeed there really is such a construction and don't just have to take it on my word,","but also a perhaps a little bit more so, because I hope it sparks your curiosity.","And you'd like to read this section of how on earth this construction might work.","Um, so you can find that in Ericson. 11 1211 if you are curious for the details, the picture, and I'll take a question just a second."]},{"start_time":1395,"end_time":1440,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=1395&isPrimary=true&absoluteTime=13356553695.543","captions":["computationally intractable problems that we have considered by a series of reductions ultimately from satisfiability.","Uh, question. Um, uh, come the gadgets.","Why is the unit, uh, like, not directly what is cluttered back?","To which one? Why why is the diagram different?","Why is the unit axis different? Uh, so the question was why in the in the diagram here, like why is this edge,","uh, like faded instead of bolded here and like why is it a two center right."]},{"start_time":1530,"end_time":1554,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=1530&isPrimary=true&absoluteTime=13356553830.543","captions":["You will recall that I said, I think this is one of the most useful implications of understanding that some","problems are computationally intractable is to be able to reformulate our goals.","In particular,","what we will do today is to attempt to find approximation algorithms for some of these sorts of problems that are efficient and close to optimal."]},{"start_time":1620,"end_time":1752,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=9&isPrimary=false&absoluteTime=13356553920.543","captions":["but remember that it was not polynomial time in the bit representation of the input,","because one of the terms in the quadratic was b, which b is just like a single integer, and it only takes log of b bits to represent b.","So our algorithm was polynomial time in D, which is exponential in the representation of b.","We talked about that nuance a little bit last time.","In other words, or perhaps more simply, you shouldn't expect to get an algorithm for the knapsack problem that say,","only depends on n in a polynomial way, and also is guaranteed to have the exact optimal solution.","That is what you should not expect. How would we measure if we reformulated our goals?","We said, you know what? Forget about exact optimal in terms of maximum value.","Suppose I just want something close to how do I measure how close I am?","The most standard notion is the approximation ratio. Let's compare two possible solutions in this case.","As you may recall from this example.","The optimal solution is to choose items one and two, which has a total cost of ten, which is our budget and a total value of 108.","An alternative, reasonable but not optimal solution would be to choose just item zero, which has a value of 100, slightly less than 100.","We could then measure the approximation ratio as um, the optimal thing.","In this case this is a maximization problem. So we can take the optimal thing divided by what we were able to achieve.","And we get some ratio in this case 1.08.","We were 8% off from optimal. In this case this will be the standard kind of like foundational thing that we will measure as we think about an","approximation algorithm for an optimal solution on an instance versus whatever our algorithm computed on an instance.","What's the ratio of those two quantities for one of these optimization problems of the form maximize something or minimize something."]},{"start_time":1800,"end_time":1848,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=10&isPrimary=false&absoluteTime=13356554100.543","captions":["Now the reason I need to give you two ratios here is kind of dumb.","It's just that I haven't specified to you whether we're trying to minimize or maximize in this case.","So let me show you a simpler thing than this more general one in just a second.","Also, you will note that the uh, alpha of in term here.","Why is this like a function of n? This thing is called the approximation factor.","This is because in general, there might be problems where the kind of approximation ratio you can guarantee depends on the size of the input.","Like it might get worse for bigger problems in general okay.","So in the most general case your approximation factor might be a function of the size of the input.","So I can simplify both of these for a common form of a problem.","Let me show you that. Suppose I just specify it's a minimization problem that I don't need the maximum of these two ratios."]},{"start_time":1971,"end_time":1980,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=1971&isPrimary=true&absoluteTime=13356554271.543","captions":["And maybe that'll help to make things more concrete. The first problem we'll look at is called, uh, make spam minimization."]},{"start_time":2109,"end_time":2160,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=2109&isPrimary=true&absoluteTime=13356554409.543","captions":["Let me show you an example, and then argue to you that despite the fact that this problem seems quite simple,","it is computationally intractable if you have a large number of jobs.","Here's an example. Suppose we have three machines and we have the following six jobs.","If I was to use this assignment. So I assign these two jobs with times five and ten to the red machine.","This one with time 22, the blue machine. These three with times five, ten and ten to the purple machine.","Then the total loads are 15 for the red machine, 20 for the blue machine, 25 for the purple machine.","Meaning suppose these are in units of seconds or something like this.","It's going to take 25 seconds for you to finish processing all of these jobs.","And this purple machine is the one that's determining that factor.","It's the most bloated machine. Your make span is the maximum of the total load on these machines are 25.","You think about this example for a second, and you may realize this is not an optimal solution."]},{"start_time":2163,"end_time":2202,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=2163&isPrimary=true&absoluteTime=13356554463.543","captions":["We should instead have done the following. We should have put this heaviest job on one machine to focus on alone.","Split the two tens somewhere else ten, five and five here.","Perfectly balanced in this case. For a mix them 20 would have been optimal.","Not too hard to see that if you can get exactly the same load on every machine, you have an optimal solution, but you might not be able to do that.","That might not be possible.","Assuming that you can't split the jobs up and be like, do this third of this job on this machine and the other two thirds on this other machine,","which both is kind of a weird framing and also, it turns out, extremely impractical in reality."]},{"start_time":2313,"end_time":2340,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=2313&isPrimary=true&absoluteTime=13356554613.543","captions":["This is not a hard argument, but let me remind you that you need to prove something in two directions.","Right. The two directions here. Suppose that you, uh, can partition your original input to the partition problem.","Well, then, if you assign exactly that partition to the two machines and you're making a minimization problem,","you would indeed achieve exactly this make span. You need to go the other way as well.","So suppose that the minimum make span equals this quantity on a constructed instance."]},{"start_time":2409,"end_time":2478,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=2409&isPrimary=true&absoluteTime=13356554709.543","captions":["natural and interpretable, uh, greedy algorithm for the algorithm itself.","And then the main work is just going to be in trying to convince ourselves that this simple,","greedy algorithm indeed does achieve a close approximation to the optimal solution, though it may not necessarily be exactly optimal.","I'll give you a demonstration in the next slide, leaving the pseudocode here.","But the idea in words is very simple. Consider your jobs in an arbitrary order, one at a time.","Assign the current job to the least loaded machine at present.","Continue in that fashion until you have assigned all jobs. It's the whole algorithm.","You can implement that in nearly linear time with a binary heap,","or you can implement it in quadratic time if you don't think very hard about the data structures, right.","By the way, I do have an assumption here that the number of jobs is greater than the number of machines.","Otherwise, this is a totally trivial problem. If it's got more machines than jobs, just put one job on every machine.","Okay, so this pseudocode is assuming you've got more jobs than machines."]},{"start_time":2520,"end_time":2601,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=14&isPrimary=false&absoluteTime=13356554820.543","captions":["Anyway, just to decide about online algorithms. If you are curious a topic for other courses, what will the greedy algorithm do?","If the first job we consider up at the top is 20, we'll put it to the least bloated machine.","Let's assume we break ties arbitrarily, meaning I will make no assumptions about how ties are broken when we argue for the approximation.","Maybe it just goes to the right one. Okay. The next two are also we're going to have a tie for this one.","So maybe we just assign it to blue. Uh, okay. Now at this point, looking at job with runtime ten, the least loaded machine is purple.","Will assign it there. At this point the next least loaded machine is blue.","So we'll assign this five there. Then we got a tie between two machines, each with total of ten.","We assign this arbitrarily to one of them and this to the other, giving us.","In this case we're in the greedy algorithm, an optimal solution, which is great.","And it demonstrates my point that even though that I mentioned earlier.","Right. An approximation algorithm does not mean that you do like we're going to argue this is a two approximation algorithm,","but that doesn't mean the algorithm gives you something two times worse than optimal on all input.","It means that the algorithm never gives you anything worse than two times optimal.","In this case, it gave us the optimal solution. However, that is not always true."]},{"start_time":2700,"end_time":2808,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=15&isPrimary=false&absoluteTime=13356555000.543","captions":["And then what we could have done instead. In fact, I digress. I didn't like it.","And we could have done instead is put, uh, the 19 and one of the ten jobs,","say, on the Blue machine and the other 310 jobs over here on the Red machine.","And now none of the computers would have a load more than 30. So the optimal solution here turns out to be 30.","But the greedy algorithm only came up with a solution with makes down 49.","The approximation ratio on this instance then is 1.63, which I'm claiming immediately implies a lower bound on the approximation factor.","The approximation factor of this algorithm. The worst case overall input, cannot be better than 1.63.","Why not? Well, here's an instance of the problem where the algorithm only obtains an approximation ratio of 1.63.","There are questions about this lower bound. What that means. Yes.","Yeah. Sort of. Um.","The approximation factor of an algorithm is the worst case over input.","It says the algorithm will never obtain an approximation ratio worse than whatever it is.","If you can give a single instance like this, where you. The algorithm indeed achieves an approximation ratio of, let's say 1.63.","That means that the worst case is at least 1.63.","So we have a lower bound. The approximation factor is at least one three cannot be better than 1.63.","That, of course, says nothing about an upper bound on the approximation factor.","Like is this a two approximation algorithm? Who knows? This doesn't show you anything like that.","How would you argue such a thing? The real trick in a lot of problems, you're trying to argue about correctness,"]},{"start_time":2880,"end_time":3051,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=16&isPrimary=false&absoluteTime=13356555180.543","captions":["I'll try to argue to you that look opt can't be arbitrarily small, right?","I want to argue to you that essentially two things that what our algorithm achieves is not going to be too big,","and also that the optimal solution would have obtained can't be too small in order to bound the ratio.","I got to come at it from both of those directions. So let me start by saying that, look, the optimal solution can't be arbitrarily small.","If you got two machines and a bunch of jobs and they all got a bunch of runtime, you can't have an optimal solution which makes man like zero.","Can you say anything more specific? Let's say some more specific things.","The first of which is that an optimal solution has to have a makes man at least the runtime of the longest single job.","The longest single job had to be assigned to some machine.","Therefore, the load on that machine has to be at least the runtime of the single longest job that make span a minimum over all the machines.","Thus, assuming the maximum over all the machines thus has to be at least that runtime.","So there's one bound for you on why an optimal solution can't be arbitrarily small.","It's not sufficient. So let me give you another one that I'll need for the argument.","This is sometimes called a, uh, a volume bound or a volume argument,","and it is as follows that the optimal solution also has to be at least I claim the average,","uh uh, in some sense average over the machines of the total runtime.","So take the total runtime over all the jobs. Divide by the number of machines.","This is just saying inequality. What we actually said earlier, which is that, uh,","certainly an optimal solution can't do better than to perfectly balance the load if you","perfectly balanced the load so that every machine had exactly the same total load,","what would that total load be on each machine?","It would be exactly this average, the total runtime over all the jobs divided by the number of machines.","So an optimal solution certainly can't do better than that. If you want an argument, it's by contradiction and it's 1 or 2 sentences.","If every machine had load strictly less than this,","then the total processing time across all the machines would be strictly less than the total runtime of all the jobs.","Which means you didn't schedule some job, which is a contradiction. You didn't actually have a valid solution.","Okay, I claim that I'll be able to prove that this greedy algorithm is a two approximation algorithm using only these two relatively simple facts,","but combining them in the right way. So here's an upper bound argument that the algorithm indeed obtains an approximation factor of two."]},{"start_time":3060,"end_time":3240,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=17&isPrimary=false&absoluteTime=13356555360.543","captions":["The two approximation algorithm. Consider.","Let me just introduce some notation. The machine with the greatest load.","This is all considering under the execution of our algorithm on an arbitrary input.","So given an arbitrary input to the problem, consider the execution of our greedy algorithm at the end of the execution of the algorithm.","Let I be the machine that had the greatest load. Know that this is the machine that determines the maximum.","Let J be the last job over the execution of our algorithm that was assigned to machine I.","And that is the last thing I'll need introduce for. I'll show you a picture that l of I j t the load on that machine.","I prior to our assignment of the job j to that machine.","So this is the penultimate load on the machine that ended up having the greatest load.","The main span of our algorithm on this particular arbitrary input is equal to what?","It's equal to, uh, the runtime of that last job that we assigned to that machine, I plus the total load before that job.","Jake. Out of sight. Right. That's just the total load on the machine, which we supposed was the machine with the greatest load.","Thus, this is the mixed band. Here's a picture of what I'm talking about.","We have a bunch of different machines. We've assigned a bunch of jobs to.","Suppose here that the runtime of one of the jobs is represented by the height of these rectangles.","For the jobs, one of the machines ended up being the most loaded at the end of the execution of our algorithm.","We call that machine pi. We call J the last job that we assigned to that machine.","So suppose we assign them by stacking them on top of each other. Then there's j the main span right.","Remember is the maximum total load on any of the machines which is going to be the height of like this particular machine here.","And uh, the load of that which is equal to the make span is equal to l of I, j is this everything before J uh,","and in the time for J I'm just decomposing the structure now of what our algorithm did.","That's all I'm doing, telling you how you can write the make span on an arbitrary input that our algorithm obtained.","Okay. What I will argue to you to get this bound is a two approximation algorithm is that the runtime of J is in most the optimal solution,","and also that L of J. The total runtime of everything before then is also at most the optimal solution.","The total then says the total is equal to. The sum of these two things is about two times an optimal solution."]},{"start_time":3420,"end_time":3471,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=19&isPrimary=false&absoluteTime=13356555720.543","captions":["To do this, we had to understand two things structurally about an optimal solution.","Lower bounding the possible value of an optimal solution.","And then we had to find a way to relate those two bounds to the structure of the main span of the solution computed by our algorithm.","And in particular, the trickier thing was to connect it to our greedy choice at some step.","Are there questions about this argument? It's not a lot of text, but it's perhaps subtle in some ways.","You might be asking, can we do better? Is that or are there is this is there a better way to do it?","Are there other ways to do it? Uh, you might be thinking, are modifications to the algorithm.","You might be thinking about the analysis. Let's chat with each other about a couple of related questions to that."]},{"start_time":3582,"end_time":3600,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=3582&isPrimary=true&absoluteTime=13356555882.543","captions":["Us know. Right away."]},{"start_time":3780,"end_time":3960,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=21&isPrimary=false&absoluteTime=13356556080.543","captions":["Yeah. I I, I don't I.","Don't. Know I.","Just like. You know I.","Oh I like.","You know. I.","Guess. I was.","I know. That's why I like you. I.","Am. So happy.","For. You guys.","I have. Never.","Had incidents. Like.","A lot of times like this. It's like twice.","Three times. I.","Rest in peace. Yeah.","Yeah. Just like I think.","Yeah. Yeah.","Yeah. Take another 25 seconds or so and try to get some answers that we have already.","Yes. Yes."]},{"start_time":4140,"end_time":4233,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=23&isPrimary=false&absoluteTime=13356556440.543","captions":["So for those of you who are out there, uh, my favorite optimizers in the crowd,","and we're thinking about how to improve this algorithm, I suspect that a few of them were wondering this.","Like, shouldn't I worry about the big jobs first and then kind of like, fill in with the little jobs that can go into the cracks?","That intuition makes perfect sense, is extremely reasonable.","And in this case indeed,","you can show the approximation factor if you consider jobs in that order is actually strictly lower than three, actually than two.","You can achieve three halves fairly easily.","Okay. Um, but this work requires more argument, right? You have to give an analysis like that that we just gave.","But you also somehow. You would somehow have to give a tighter bound on the cost of the last item you add.","That's my hint for those of you who want to try to, uh, to argue that indeed, that's better than a two approximation algorithm.","It's in our analysis. Remember that our bound on the last job we assigned to the most loaded machine was that.","That's it. Most opt. But if you consider the jobs in order from, uh, large runtime to small runtime intuitively right,","the last job that you assign to a particular machine should have a lot less than opt, right?","It should be one of the lower run time jobs. The question in the argument was, how do you come up with a bound for that?","Something to consider for the root. Let me introduce to you the traveling salesperson problem, and then we'll consider solving it next time."]},{"start_time":4308,"end_time":4320,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=4308&isPrimary=true&absoluteTime=13356556608.543","captions":["Uh, you can think, for example, in the real world, you think about traveling salesperson problems.","This is kind of like a logistics problem, right? Like if you're trying to design bus routes that have to visit all of a number of locations,","trucking or supply logistics circuits, that something has to to travel to visit a bunch of nodes."]},{"start_time":4350,"end_time":4443,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=6f5d9c4c-7f11-4173-9b89-b14601369e4b&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=4350&isPrimary=true&absoluteTime=13356556650.543","captions":["Exhaustive search will be like try all possible options, which would be like try all possible orderings in which to visit your N locations.","There are n factorial number of such permutations.","So just to show you some funny numbers about how bad computationally intractable problems can get if you try to do exhaustive search.","Suppose you've got a machine that can check two to the 30 permutations per second.","My favorite kind of machine a one giga permutation per second machine.","This is wildly optimistic, by the way. That if you wanted to solve by brute force exhaustive search TSP on an input of size ten.","Your search space is on the order of millions, and it would take you less than a second to solve that by exhaustive search.","But here is how bad factorial or exponential scaling is to solve an instance with just 20 locations.","This is not absurdly large. This is like not even big enough to like, handle your Amazon delivery truck in Durham.","Like this. We're not even at that scale yet, and it will take you over 70 years to consider exhaustively all possibilities.","If you've got now, uh, 30, 30, uh, possible locations, it will take you several lifetimes of the universe just fine.","Envelope math for those of you. For indeed, you can also argue, as we will do next time, that TSP is NP hard by reduction from Hamiltonian cycle."]},{"start_time":4500,"end_time":4680,"image":"https://duke.hosted.panopto.com/Panopto/Pages/Viewer/Thumb.aspx?eventTargetPID=d3526dd7-a496-4606-b022-b14601367c70&sessionPID=8bf7bb01-d63f-4d28-b77a-b0ce01475432&number=25&isPrimary=false&absoluteTime=13356556800.543","captions":["Yeah. The house party. It's like a cheap.","I just like meeting with, like, one of the high.","I do not like connected with the tail. That's right. That is why you pay for it.","It's exactly what? Tail?","It's a tail that you go to. You put it in my hair.","It's just look at it.","It's like the last one in the spring. And then.","Yeah. That's all you've got. There's like a certain pattern and then you get inside a certain pattern of degree distribution.","I struggle with it. The first thing you can do is like if it doesn't have the right kind of degrees.","It's like, I can certainly jump over it. Yeah. It's not that.","Okay. Now, suppose that I know for a fact that I got a correct degree distribution.","I it's, you know, I actually like to see it go right.","Wait a minute. I went to the right vertex and see if it actually came in here.","Yeah. See if you've got the right you know.","So you got the right ingredients. And then you also know what C is, as you say like what should be the graph.","You can look at each one of those and check is it connected to each other. One of them's right at some you know quadratic time of course.","And then what else do I need to check? Uh, if I know.","Yeah. Yeah. And then you'll see the check for that.","But you can do it when you're checking like degree distributions and putting things in. See, like is it the right size.","For example if you go to and then for like the vertex id that's the one vertex that's got the tail.","And like you would have to check. Is your path right.","Is there a path for that like that to the last thing in the top.","Because we know the last thing. The tail is the one with degree one, right?","You know, with the two endpoints of the tail to be by the degree distribution. Right.","Because one of them has to be like clique plus one and then one that has to be just one.","So the question is is everything else in that. So you see if you have trouble with starting point that and starting right point right there one.","That's right. Okay. That makes sense. So you can do it.","But it is like a little bit more involved than like sometimes where it's super obvious.","Yeah. Okay. So it's like a way of thinking of the two degree distributions.","Right. Do we need to worry about like. I was looking at it because I was looking at the, for example,","that you gave in the high top with like three and also three and like technically G minus like G is three.","But then this guy also has like in the click the guy and that is but in the tail.","And it looks like that's one more. Right. You just want to show the part one.","I mean I don't think it should all be. It should still be. Right.","You should always have like the tails connecting to one thing, one click only one right."]}]}